
ï»¿1
00:00:00,001 --> 00:00:04,569
[MUSIC]

2
00:00:04,571 --> 00:00:07,705
Stanford University.

3
00:00:07,707 --> 00:00:11,809
>> Okay, well, welcome to lecture 12 of Stanford CS193P

4
00:00:11,811 --> 00:00:13,243
winter of 2015.

5
00:00:13,245 --> 00:00:16,513
Today we're going to talk about a different kind

6
00:00:16,515 --> 00:00:17,880
of animation than we talked about last week,

7
00:00:17,882 --> 00:00:20,549
which is physics-based dynamic animation, it's called.

8
00:00:20,551 --> 00:00:22,418
And then I'm going to do a big demo of that,

9
00:00:22,420 --> 00:00:24,119
which is called Dropit.

10
00:00:24,121 --> 00:00:26,254
First of all, let me say that what we're,

11
00:00:26,256 --> 00:00:30,158
our topic this week is dynamic animation.

12
00:00:30,160 --> 00:00:31,959
So it's a different kind of animation than we saw

13
00:00:31,961 --> 00:00:33,127
last week.

14
00:00:33,129 --> 00:00:34,961
It's a physics-based thing.

15
00:00:34,963 --> 00:00:36,963
Now we're gonna have some fun with it,

16
00:00:36,965 --> 00:00:38,564
this physics-based thing.

17
00:00:38,566 --> 00:00:40,333
And you're gonna write a game with it.

18
00:00:40,335 --> 00:00:43,102
Yeah, I'm not sure you would really use it for that.

19
00:00:43,104 --> 00:00:44,670
It's more for things like this.

20
00:00:44,672 --> 00:00:46,604
You see how when I slide this up,

21
00:00:46,606 --> 00:00:49,374
it kind of bounces a little and wiggles?

22
00:00:49,376 --> 00:00:52,109
See? It doesn't just kind of solid

23
00:00:52,111 --> 00:00:55,679
go up and stop, it kind of bounces off the top.

24
00:00:55,681 --> 00:00:58,515
Basically what's happening there is that there's gravity

25
00:00:58,517 --> 00:00:59,783
pointing up.

26
00:00:59,785 --> 00:01:01,168
Okay?

27
00:01:01,169 --> 00:01:02,552
And then there's a little bit of elasticity, and

28
00:01:02,554 --> 00:01:06,055
that view it's just being allowed to fall up and

29
00:01:06,057 --> 00:01:07,723
bounce off the bottom.

30
00:01:07,725 --> 00:01:09,091
Okay? And that's what we're going to

31
00:01:09,093 --> 00:01:12,360
learn how to do today is have gravity and bouncing and

32
00:01:12,362 --> 00:01:14,429
all this kind of physics behavior.

33
00:01:14,431 --> 00:01:16,230
But instead of just doing something, you know,

34
00:01:16,232 --> 00:01:19,366
boring like this, we're going to make a game out of it.

35
00:01:19,368 --> 00:01:21,968
The game we're going to make is Breakout.

36
00:01:21,970 --> 00:01:26,339
Or Brickout, sometimes people call it.

37
00:01:27,375 --> 00:01:31,243
The point is to learn all the APIs of this physics-based

38
00:01:31,245 --> 00:01:33,212
dynamic engine.

39
00:01:33,213 --> 00:01:35,180
But to have some fun along the way, so I've actually made

40
00:01:35,182 --> 00:01:38,683
the requirements for the game itself be pretty light, okay?

41
00:01:38,685 --> 00:01:40,985
It just basically has to do the basics of the game, and

42
00:01:40,987 --> 00:01:43,787
then giving you a lot of room to maneuver on kind of the fun

43
00:01:43,789 --> 00:01:45,589
features of the game, so.

44
00:01:45,591 --> 00:01:48,191
So dynamic animation is different

45
00:01:48,193 --> 00:01:49,859
than the animation we talked about last week.

46
00:01:49,861 --> 00:01:51,861
Last week, we were talking about taking certain view

47
00:01:51,863 --> 00:01:54,563
properties and animating them over time.

48
00:01:54,565 --> 00:01:57,366
Or perhaps animating an entire change to a view

49
00:01:57,368 --> 00:02:00,301
like a flipping over a card by flipping the whole

50
00:02:00,303 --> 00:02:01,436
view over, okay?

51
00:02:01,438 --> 00:02:03,671
Or cross-dissolving the entire view.

52
00:02:03,673 --> 00:02:06,840
This is more where we're going to have our views, and

53
00:02:06,842 --> 00:02:08,642
we're going to have them moving around on screen.

54
00:02:08,644 --> 00:02:10,377
Maybe running up against other things and

55
00:02:10,379 --> 00:02:12,745
bouncing a little bit, that kind of stuff.

56
00:02:13,681 --> 00:02:15,381
The way you make this stuff work, okay,

57
00:02:15,383 --> 00:02:16,715
it's a multi-step process.

58
00:02:16,717 --> 00:02:18,166
The firs thing is,

59
00:02:18,167 --> 00:02:19,616
you're going to need a UIDynamicAnimator.

60
00:02:19,619 --> 00:02:22,220
That's the class that really drives the whole thing, so

61
00:02:22,222 --> 00:02:23,788
you need one of those.

62
00:02:23,790 --> 00:02:27,424
And you'll only have one for any animation that's going on.

63
00:02:27,426 --> 00:02:29,993
You can have multiple UIDynamicAnimators if you had,

64
00:02:29,995 --> 00:02:32,028
for example, another view doing some animation at

65
00:02:32,030 --> 00:02:32,962
the same time.

66
00:02:32,964 --> 00:02:34,897
But within your own view,

67
00:02:34,898 --> 00:02:36,831
you're probably just gonna have this one animator.

68
00:02:36,834 --> 00:02:38,233
So you're gonna create this animator,

69
00:02:38,235 --> 00:02:41,770
then you're gonna add dynamic behaviors to it.

70
00:02:41,772 --> 00:02:44,005
So behaviors are like gravity and

71
00:02:44,007 --> 00:02:46,774
collision and things attached to each other.

72
00:02:46,776 --> 00:02:49,343
It's how the things inside are going to behave, 'Kay?

73
00:02:49,345 --> 00:02:52,179
And these are basically physics-based descriptions of

74
00:02:52,181 --> 00:02:53,814
how they're going to behave.

75
00:02:53,816 --> 00:02:55,082
And then, of course,

76
00:02:55,083 --> 00:02:56,349
there's the things that are going to be animated,

77
00:02:56,351 --> 00:02:59,752
which for our purposes are always gonna be UIViews.

78
00:02:59,754 --> 00:03:01,237
Okay?

79
00:03:01,238 --> 00:03:02,721
These UIViews, DynamicItems,

80
00:03:02,723 --> 00:03:04,690
they are going to be affected by the gravity and

81
00:03:04,692 --> 00:03:07,559
the collisions and all those things.

82
00:03:07,561 --> 00:03:08,092
Okay?

83
00:03:08,094 --> 00:03:09,060
That's it.

84
00:03:09,062 --> 00:03:10,461
Just create the dynamic animator,

85
00:03:10,463 --> 00:03:12,396
create the behaviors you want and

86
00:03:12,397 --> 00:03:14,330
configure them, add the items to the behaviors, bam.

87
00:03:14,333 --> 00:03:16,132
It'll just start automatically animating.

88
00:03:16,134 --> 00:03:17,633
And if you remove an item from an behavior,

89
00:03:17,635 --> 00:03:19,001
it'll stop animating.

90
00:03:19,003 --> 00:03:19,668
Okay?

91
00:03:19,670 --> 00:03:20,535
Simple as that.

92
00:03:20,537 --> 00:03:22,137
So let's look at the steps.

93
00:03:22,139 --> 00:03:25,373
The first step is you need to create a UIDynamicAnimator,

94
00:03:25,375 --> 00:03:27,608
and the dynamic animators we're going to use,

95
00:03:27,610 --> 00:03:30,444
I'm only going to talk about ones that animate views.

96
00:03:30,446 --> 00:03:32,646
You can actually use an animator to animate arbitrary

97
00:03:32,648 --> 00:03:33,313
things.

98
00:03:33,315 --> 00:03:34,514
Okay?

99
00:03:34,515 --> 00:03:35,714
Not even graphical things.

100
00:03:35,717 --> 00:03:38,317
But we're only gonna talk about animating views.

101
00:03:38,319 --> 00:03:40,302
Okay?

102
00:03:40,303 --> 00:03:42,286
So when we create a dynamic animator that animates views,

103
00:03:42,289 --> 00:03:45,390
we have to specify the top-level

104
00:03:45,392 --> 00:03:48,927
UIView, the view at the top of the view hierarchy where our

105
00:03:48,929 --> 00:03:50,061
animations are occurring in.

106
00:03:50,063 --> 00:03:52,930
Now animations can occur anywhere deep

107
00:03:52,932 --> 00:03:54,765
down that view hierarchy you want.

108
00:03:54,767 --> 00:03:57,034
But we have specified the top-level view.

109
00:03:57,036 --> 00:03:59,669
So, in other words, any view that this dynamic animator's

110
00:03:59,671 --> 00:04:04,540
going to animate has to be a subview or subview of

111
00:04:04,542 --> 00:04:07,142
a subview of a subview of this reference view.

112
00:04:07,144 --> 00:04:08,810
Okay? So that's the only argument

113
00:04:08,812 --> 00:04:11,479
you have to provide when you create a dynamic animator.

114
00:04:13,116 --> 00:04:14,348
Then you create these behaviors.

115
00:04:14,350 --> 00:04:17,417
Behaviors are these concrete subclasses of

116
00:04:17,419 --> 00:04:19,019
UIDynamicBehavior.

117
00:04:19,021 --> 00:04:21,120
And so there's like UIGravityBehavior,

118
00:04:21,122 --> 00:04:23,689
just say UIGravityBehavior, takes no arguments.

119
00:04:23,691 --> 00:04:25,024
And in CollisionBehavior,

120
00:04:25,026 --> 00:04:27,259
I'm going to talk about all of these behaviors you can do,

121
00:04:27,261 --> 00:04:30,161
and you just add them with the method addBehavior

122
00:04:30,163 --> 00:04:31,229
to your animator.

123
00:04:31,231 --> 00:04:32,363
Simple enough.

124
00:04:32,365 --> 00:04:34,932
And then you add the DynamicItems which are gonna

125
00:04:34,934 --> 00:04:35,866
be UIViews.

126
00:04:35,868 --> 00:04:37,734
Okay? UIDynamicItems

127
00:04:37,736 --> 00:04:39,736
are really just a protocol I'm gonna talk about in a second,

128
00:04:39,738 --> 00:04:42,238
but UIView implements that protocol.

129
00:04:42,240 --> 00:04:45,774
But you just add these items using the method addItem on

130
00:04:45,776 --> 00:04:47,575
UIDynamicBehavior.

131
00:04:47,577 --> 00:04:49,444
So you see how I'm adding the items to the behavior.

132
00:04:49,446 --> 00:04:51,278
So you don't add the items to the animator,

133
00:04:51,280 --> 00:04:52,613
you add the items to the behavior.

134
00:04:52,615 --> 00:04:55,215
You add the behaviors to the animator.

135
00:04:55,217 --> 00:04:57,000
Okay?

136
00:04:57,001 --> 00:04:58,784
So in this case up here, item1,

137
00:04:58,787 --> 00:05:02,955
I added it to gravity and collider.

138
00:05:02,957 --> 00:05:05,124
So item1 is going to be affected by the gravity,

139
00:05:05,126 --> 00:05:07,659
and it's also going to collide with whatever

140
00:05:07,661 --> 00:05:09,227
the collider sets up.

141
00:05:09,229 --> 00:05:11,295
Item2, is affected by the gravity, but

142
00:05:11,297 --> 00:05:13,397
it will not collide with whatever's in the collider.

143
00:05:13,399 --> 00:05:15,933
It also won't collide with item1, they would pass right

144
00:05:15,935 --> 00:05:18,869
through each other, because it's not part of the collider.

145
00:05:18,871 --> 00:05:21,171
Okay, so if you want things to interact with each other,

146
00:05:21,173 --> 00:05:22,839
they have to both be a part of the same behavior.

147
00:05:25,109 --> 00:05:28,043
Okay, that protocol is talking about UIDynamicItems

148
00:05:28,045 --> 00:05:29,811
that UIView implements.

149
00:05:29,813 --> 00:05:34,415
It just has three properties, actually, bounds.

150
00:05:34,417 --> 00:05:35,983
This is read-only, so

151
00:05:35,985 --> 00:05:40,320
the animator cannot animate the size of something.

152
00:05:40,322 --> 00:05:41,755
Okay? Because

153
00:05:41,756 --> 00:05:43,189
the bounds part of the protocol is read-only.

154
00:05:44,292 --> 00:05:46,959
So the two animatable properties are the center, so

155
00:05:46,961 --> 00:05:48,193
that's the position of the thing.

156
00:05:48,195 --> 00:05:50,362
So you can see animators moving things all over

157
00:05:50,364 --> 00:05:52,263
the place, that's mostly what they do.

158
00:05:52,265 --> 00:05:55,700
And then also a transform, which is AffineTransform.

159
00:05:55,702 --> 00:05:57,601
Now notice that view UIView already have

160
00:05:57,603 --> 00:05:59,703
all three of these properties, so you didn't even have to

161
00:05:59,705 --> 00:06:01,271
do anything to implement this protocol.

162
00:06:02,374 --> 00:06:03,406
That AffineTransform,

163
00:06:03,408 --> 00:06:05,141
by the way, is only used for rotation.

164
00:06:06,077 --> 00:06:08,777
So basically, the animator can rotate the view, or

165
00:06:08,779 --> 00:06:10,211
he can position it.

166
00:06:10,213 --> 00:06:13,147
That's something that the animator can do.

167
00:06:13,149 --> 00:06:16,684
Okay, now if you change the center or the transform,

168
00:06:16,686 --> 00:06:18,285
like you change the frame or

169
00:06:18,287 --> 00:06:20,654
the center of the view to move it and

170
00:06:20,656 --> 00:06:23,423
the animator has a hold of it, you gotta tell the animator

171
00:06:23,425 --> 00:06:26,459
you did that by calling updateItemUsingCurrentState.

172
00:06:26,461 --> 00:06:28,060
You just pass the view.

173
00:06:28,062 --> 00:06:29,278
Okay?

174
00:06:29,279 --> 00:06:30,495
And so the animator can say, oh, that thing moved.

175
00:06:30,498 --> 00:06:32,064
And it will update its internal state

176
00:06:32,066 --> 00:06:33,431
to start from wherever that thing is.

177
00:06:33,433 --> 00:06:35,233
Does that make sense?

178
00:06:35,235 --> 00:06:38,069
Obviously, if you and the animator are fighting over

179
00:06:38,071 --> 00:06:41,638
who's positioning a view, you have to at least communicate,

180
00:06:41,640 --> 00:06:42,973
and this is how you do it.

181
00:06:42,975 --> 00:06:43,673
Okay?

182
00:06:43,675 --> 00:06:44,874
Simple enough.

183
00:06:44,876 --> 00:06:45,941
All right. So let's talk about some of

184
00:06:45,943 --> 00:06:47,276
these behaviors, the concrete behavior.

185
00:06:47,278 --> 00:06:50,479
So gravity is very simple behavior.

186
00:06:50,481 --> 00:06:52,147
It just has an angle.

187
00:06:52,149 --> 00:06:54,549
So you can have the gravity be going up the screen or

188
00:06:54,551 --> 00:06:56,751
down the screen or to the left or to the right or

189
00:06:56,753 --> 00:06:59,820
any angle you want, and it has a magnitude.

190
00:06:59,822 --> 00:07:02,139
Okay? So

191
00:07:02,140 --> 00:07:04,457
the magnitude is in the scale where 1.0 is 1,000

192
00:07:04,460 --> 00:07:07,127
points per second per second.

193
00:07:07,129 --> 00:07:08,912
'Kay?

194
00:07:08,913 --> 00:07:10,696
You all know that gravity is an acceleration.

195
00:07:10,699 --> 00:07:13,199
The acceleration due to gravity on Earth is 9.8

196
00:07:13,201 --> 00:07:15,000
meters per second squared.

197
00:07:15,002 --> 00:07:18,837
And the acceleration due to gravity in these behaviors is

198
00:07:18,839 --> 00:07:21,572
1,000 points per second squared.

199
00:07:21,574 --> 00:07:23,240
'Kay? You can also set this

200
00:07:23,242 --> 00:07:25,109
as a vector, but angle and magnitude

201
00:07:25,111 --> 00:07:27,144
are probably the easiest way to understand this.

202
00:07:27,146 --> 00:07:29,079
So you just set the gravity.

203
00:07:29,080 --> 00:07:31,013
Now any item you add will start accelerating in

204
00:07:31,016 --> 00:07:31,948
that direction.

205
00:07:31,950 --> 00:07:33,500
The instance you add it,

206
00:07:33,501 --> 00:07:35,051
it's gonna start accelerating in that direction,

207
00:07:35,053 --> 00:07:37,319
just like gravity were pulling on it.

208
00:07:37,321 --> 00:07:38,820
'Kay?

209
00:07:38,822 --> 00:07:40,622
Then there's attachment behaviors.

210
00:07:40,624 --> 00:07:43,891
So attachments you can attach two items, or

211
00:07:43,893 --> 00:07:46,994
you can attach an item to an anchor point.

212
00:07:46,996 --> 00:07:49,163
Okay? That item still going to be

213
00:07:49,165 --> 00:07:52,733
affected by all the other behaviors like gravity, so

214
00:07:52,735 --> 00:07:54,167
if I attached a view.

215
00:07:54,169 --> 00:07:56,235
To an anchor point, like this.

216
00:07:56,237 --> 00:07:57,970
And there was gravity on the view.

217
00:07:57,972 --> 00:07:59,805
It would swing down like this and

218
00:07:59,807 --> 00:08:02,140
stop if there was gravity down, right?

219
00:08:02,142 --> 00:08:03,408
'Cuz the gravity would be pulling it down.

220
00:08:03,410 --> 00:08:05,243
But the attachment would be holding onto it.

221
00:08:05,245 --> 00:08:07,478
Does that make sense?

222
00:08:07,480 --> 00:08:08,846
So the attachment basically.

223
00:08:08,848 --> 00:08:10,814
But it's like a bar that's attached.

224
00:08:10,816 --> 00:08:12,982
That bar could be springy also.

225
00:08:12,984 --> 00:08:15,685
So if it was a springy bar attachment, then the gravity

226
00:08:15,687 --> 00:08:18,087
would pull it down, and it would spring like this.

227
00:08:19,090 --> 00:08:20,288
So you can get a little springy and

228
00:08:20,290 --> 00:08:24,292
you can control the dampening and all that as well.

229
00:08:24,294 --> 00:08:25,893
You can also control the distance between

230
00:08:25,895 --> 00:08:28,095
those two things.

231
00:08:28,096 --> 00:08:30,296
By the way, that distance is settable while it's animating,

232
00:08:30,299 --> 00:08:31,932
so this thing might be pulling down and

233
00:08:31,934 --> 00:08:33,500
you might be changing the length and

234
00:08:33,502 --> 00:08:34,901
it might swing way down and

235
00:08:34,903 --> 00:08:36,635
then you might pull it back up.

236
00:08:36,637 --> 00:08:38,404
So you can control all this stuff.

237
00:08:38,406 --> 00:08:40,389
All these things like that,

238
00:08:40,390 --> 00:08:42,373
even the anchor point can move while it's animating.

239
00:08:42,376 --> 00:08:44,642
And we're gonna actually do that in the demo.

240
00:08:44,644 --> 00:08:47,879
So it's incredibly flexible what you can do when you

241
00:08:47,881 --> 00:08:51,148
can change the attributes of these behaviors on the fly,

242
00:08:51,150 --> 00:08:53,750
while things are happening with gestures or whatever.

243
00:08:55,620 --> 00:08:57,854
Collision behavior is an awesome behavior.

244
00:08:57,856 --> 00:08:59,588
You're gonna use that very often.

245
00:09:01,058 --> 00:09:04,593
It can basically control collisions between items.

246
00:09:04,595 --> 00:09:07,328
And also, between items and a boundary.

247
00:09:07,330 --> 00:09:09,197
And you can set up as many boundaries as you want.

248
00:09:09,199 --> 00:09:10,882
So, for your assignment five,

249
00:09:10,883 --> 00:09:12,566
where you're gonna be doing this brickout game or

250
00:09:12,568 --> 00:09:13,734
breakout game.

251
00:09:13,736 --> 00:09:15,669
You're probably gonna wanna use boundaries for

252
00:09:15,671 --> 00:09:17,137
all your bricks.

253
00:09:17,139 --> 00:09:19,706
You're not gonna, they'll be UI views cuz you've got to

254
00:09:19,708 --> 00:09:22,575
draw them, but you won't be having those UI views

255
00:09:22,577 --> 00:09:25,244
participate in the collisions, cuz then the bricks would

256
00:09:25,246 --> 00:09:27,379
start flying into each other, all over the place.

257
00:09:27,381 --> 00:09:29,981
You just want them to kind of be fixed boundaries, so

258
00:09:29,983 --> 00:09:31,215
that when the ball hits them,

259
00:09:31,217 --> 00:09:34,151
then that view animates itself disappearing, okay?

260
00:09:35,454 --> 00:09:37,587
So the way you set these boundaries,

261
00:09:37,589 --> 00:09:39,088
there's really two ways.

262
00:09:39,090 --> 00:09:43,759
One is you can set a Bezier path, any Bezier path, and it

263
00:09:43,761 --> 00:09:46,795
will use that Bezier path as the outer edges of a boundary.

264
00:09:46,797 --> 00:09:48,513
'Kay.

265
00:09:48,514 --> 00:09:50,230
It could be a rectangle or a circle, could be a line.

266
00:09:50,233 --> 00:09:53,067
And you just, things that hit the line bounce off of it.

267
00:09:54,270 --> 00:09:57,171
Or you can set this translatesReferenceBoundsInto-

268
00:09:57,173 --> 00:10:00,307
Boundary, set that to true, and then the outer edges

269
00:10:00,309 --> 00:10:03,777
of the animated reference view will be a boundary.

270
00:10:03,779 --> 00:10:05,712
Now, you can't use that for your homework,

271
00:10:05,713 --> 00:10:07,646
because of course, the bottom one has to fall through.

272
00:10:07,649 --> 00:10:10,616
If your bouncing ball gets past the paddle, it falls off.

273
00:10:11,618 --> 00:10:13,051
So you'll have to use lines.

274
00:10:13,053 --> 00:10:14,485
Bezier curve that's line two,

275
00:10:14,487 --> 00:10:17,588
line two, line two or whatever.

276
00:10:17,590 --> 00:10:19,523
Okay? When you add a boundary

277
00:10:19,525 --> 00:10:21,024
you give it an identifier.

278
00:10:21,026 --> 00:10:23,927
Now, that identifier is an NSCopying.

279
00:10:23,929 --> 00:10:28,764
So NSCopying is a protocol that is implemented by

280
00:10:28,766 --> 00:10:33,835
NSString, NSNumber,

281
00:10:33,837 --> 00:10:36,538
things like that, so that means String and

282
00:10:36,540 --> 00:10:39,840
Int/Double also can be used as the identifier for a boundary.

283
00:10:40,910 --> 00:10:44,177
So when you hit a boundary you get this message.

284
00:10:44,179 --> 00:10:46,780
You want to se yourself to be the UI collision behaviors

285
00:10:46,782 --> 00:10:48,832
delegate.

286
00:10:48,833 --> 00:10:50,883
And when a boundary is hit, it will send this message,

287
00:10:50,885 --> 00:10:52,418
it actually has a few other messages,

288
00:10:52,420 --> 00:10:55,954
to its delegates saying, there was a collision

289
00:10:55,956 --> 00:10:59,091
between an item and a boundary or between two items.

290
00:10:59,093 --> 00:11:02,260
And it's going to pass back that boundary identifier.

291
00:11:02,262 --> 00:11:03,628
You see that boundary identifier, so

292
00:11:03,630 --> 00:11:04,962
the third argument there in this

293
00:11:04,964 --> 00:11:08,365
method that it's gonna call in its delegate, and

294
00:11:08,367 --> 00:11:11,468
you have to cast that thing, cuz it'll be an NSCopying.

295
00:11:11,470 --> 00:11:13,403
So you got to cast it to be a string or number or

296
00:11:13,405 --> 00:11:16,039
whatever you put in, cast it to be that back.

297
00:11:16,041 --> 00:11:17,457
Okay?

298
00:11:17,458 --> 00:11:18,874
So it's a little small thing to understand is that

299
00:11:18,876 --> 00:11:20,576
casting behavior.

300
00:11:20,578 --> 00:11:22,611
Okay?

301
00:11:22,612 --> 00:11:24,645
So that's simple collisions.

302
00:11:26,449 --> 00:11:29,150
The snap behavior is used a lot in UI.

303
00:11:29,152 --> 00:11:31,185
You won't be using this in your homework but

304
00:11:31,187 --> 00:11:33,437
it's actually used a lot.

305
00:11:33,438 --> 00:11:35,688
It's essentially, you could imagine that you set up four

306
00:11:35,691 --> 00:11:40,426
springs on the corner of a view in a new location.

307
00:11:40,428 --> 00:11:43,662
The thing will fly to that space

308
00:11:43,664 --> 00:11:45,597
in the middle of the four springs and

309
00:11:45,599 --> 00:11:47,833
then the springs will kind of oscillate.

310
00:11:47,835 --> 00:11:49,134
So snap behavior is basically,

311
00:11:49,136 --> 00:11:52,170
move to here, with a little bit of oscillation.

312
00:11:52,172 --> 00:11:54,171
Okay, boing, kind of snapping.

313
00:11:54,173 --> 00:11:55,456
Okay, but

314
00:11:55,457 --> 00:11:56,740
snapping in a way that doesn't disconcert the user,

315
00:11:56,742 --> 00:11:59,026
where things just like, moving.

316
00:11:59,027 --> 00:12:01,311
It flies across the screen, and then wiggles a little bit.

317
00:12:01,313 --> 00:12:03,296
So let the user know,

318
00:12:03,297 --> 00:12:05,280
there's a little thing just got positioned here.

319
00:12:05,283 --> 00:12:07,850
So, you just specify the point you want it to snap to, and

320
00:12:07,852 --> 00:12:10,519
the item you want to snap, and it will zoom over there.

321
00:12:10,521 --> 00:12:13,489
Okay, and you can control how much the springs spring.

322
00:12:13,491 --> 00:12:15,857
Is it a big movement or just kinda a small movement?

323
00:12:15,859 --> 00:12:18,493
You can control the damping with that

324
00:12:18,495 --> 00:12:19,293
property there, damping.

325
00:12:19,295 --> 00:12:22,329
Then there's a push behavior.

326
00:12:22,331 --> 00:12:26,900
A push behavior means push on this thing in a certain

327
00:12:26,902 --> 00:12:31,437
angle and magnitude, kind of like gravity.

328
00:12:31,439 --> 00:12:32,738
The big difference between push and

329
00:12:32,740 --> 00:12:34,440
gravity, two differences.

330
00:12:34,442 --> 00:12:37,609
One, a push can be a one time push, all right.

331
00:12:37,611 --> 00:12:41,413
Just instantaneous push, or it can be a continuous push

332
00:12:41,415 --> 00:12:44,048
which is not like gravity cuz it's not accelerating.

333
00:12:44,050 --> 00:12:46,584
It's just a continuous velocity.

334
00:12:46,586 --> 00:12:47,551
Okay? You understand the difference

335
00:12:47,553 --> 00:12:49,686
between acceleration and velocity.

336
00:12:49,688 --> 00:12:52,789
So push would be, if you had a continuous push it would be

337
00:12:52,791 --> 00:12:55,591
a constant velocity.

338
00:12:55,593 --> 00:12:56,892
Okay?

339
00:12:56,894 --> 00:12:59,962
Now one thing about push behavior that's interesting is

340
00:12:59,964 --> 00:13:02,764
when you push, you add this behavior to your animator,

341
00:13:02,766 --> 00:13:06,134
it'll cause the items that are in it to be pushed.

342
00:13:06,136 --> 00:13:07,902
And then it just kind of sits around there.

343
00:13:07,904 --> 00:13:10,071
Wasted if it's not a continuous push.

344
00:13:10,073 --> 00:13:12,106
And sits there, wasting memory.

345
00:13:12,107 --> 00:13:14,140
And I'm going to talk about in a few slides how we can

346
00:13:14,143 --> 00:13:15,575
get that memory back.

347
00:13:15,577 --> 00:13:18,478
Okay, and we'll have to do a little memory cycle

348
00:13:18,480 --> 00:13:20,297
protection there.

349
00:13:20,298 --> 00:13:22,115
Now, there's a special kind of behavior,

350
00:13:22,117 --> 00:13:23,783
called a dynamic item behavior.

351
00:13:23,785 --> 00:13:26,118
Don't be confused by dynamic behavior,

352
00:13:26,120 --> 00:13:28,286
which is the super class of all behaviors.

353
00:13:28,288 --> 00:13:29,854
And dynamic item behavior,

354
00:13:29,856 --> 00:13:35,126
which is a sub-class of UIDynamicBehavior.

355
00:13:35,128 --> 00:13:37,928
Item behavior says how does this item or

356
00:13:37,930 --> 00:13:39,830
any of the items added to this behavior,

357
00:13:39,832 --> 00:13:43,333
how do they behave when other behaviors make them interact?

358
00:13:43,335 --> 00:13:46,169
So this is when something smashes into a wall in

359
00:13:46,171 --> 00:13:50,973
a collider, in a collision behavior, how springy is it?

360
00:13:50,975 --> 00:13:51,640
Can it spin?

361
00:13:52,642 --> 00:13:54,676
Okay?

362
00:13:54,677 --> 00:13:56,711
Or does it have to stay un-rotated?

363
00:13:56,713 --> 00:13:58,446
Those kind of things

364
00:13:58,447 --> 00:14:00,180
are all specified by this UIDynamicItemBehavior.

365
00:14:00,183 --> 00:14:02,049
So very often you'll have a gravity behavior,

366
00:14:02,051 --> 00:14:03,016
a collider behavior.

367
00:14:03,018 --> 00:14:04,217
You'll also have a dynamic

368
00:14:04,219 --> 00:14:06,886
item behavior to describe how much springiness is.

369
00:14:06,888 --> 00:14:08,254
You can, it also does density,

370
00:14:08,256 --> 00:14:10,389
resistance, other things I haven't mentioned here.

371
00:14:10,391 --> 00:14:11,623
You can look in the documentation.

372
00:14:11,625 --> 00:14:14,225
But it's kind of all the things you would expect if you

373
00:14:14,227 --> 00:14:16,928
had a physics-based engine, you need to set the kind of

374
00:14:16,930 --> 00:14:20,464
attributes, the physical attributes of an item.

375
00:14:20,466 --> 00:14:23,367
This dynamic item behavior also can report to you

376
00:14:23,369 --> 00:14:26,870
the current linear velocity and

377
00:14:26,872 --> 00:14:29,472
angular velocity of this item.

378
00:14:29,474 --> 00:14:31,140
So at any time, if you want to know,

379
00:14:31,142 --> 00:14:34,076
how fast is this thing moving and in what direction?

380
00:14:34,078 --> 00:14:35,411
You can get its linear velocity.

381
00:14:35,413 --> 00:14:37,079
Or if you want to know how fast is this thing is

382
00:14:37,081 --> 00:14:39,981
spinning, if at all, you can get its angular velocity.

383
00:14:41,051 --> 00:14:45,285
And you can also add velocity to it in a certain direction.

384
00:14:45,287 --> 00:14:46,820
So if you had something that was moving, and

385
00:14:46,822 --> 00:14:48,621
you wanted to stop it, you could.

386
00:14:48,623 --> 00:14:50,723
And then if you wanted to continue,

387
00:14:50,725 --> 00:14:52,158
you could add the velocity back.

388
00:14:53,160 --> 00:14:55,193
Just saying is all.

389
00:14:55,195 --> 00:14:56,428
Okay.

390
00:14:56,429 --> 00:14:57,662
So that's a dynamic behavior.

391
00:14:57,664 --> 00:14:59,330
Now, that's dynamic item behavior.

392
00:14:59,332 --> 00:15:00,965
Now here's UIDynamicBehavior.

393
00:15:00,967 --> 00:15:04,201
This is the superclass of all of these behaviors.

394
00:15:04,203 --> 00:15:05,936
And it's kind of an interesting superclass,

395
00:15:05,938 --> 00:15:08,138
because you can actually create a subclass.

396
00:15:08,140 --> 00:15:10,773
And in the invitation of the subclass you add

397
00:15:10,775 --> 00:15:12,942
child behaviors, you add other behaviors so

398
00:15:12,944 --> 00:15:15,110
you can have a composite behavior.

399
00:15:15,112 --> 00:15:16,445
This is very common to do.

400
00:15:16,447 --> 00:15:18,297
When you have three or

401
00:15:18,298 --> 00:15:20,148
four different behaviors all working on the same set

402
00:15:20,150 --> 00:15:20,782
of items.

403
00:15:20,784 --> 00:15:22,667
A lot of times,

404
00:15:22,668 --> 00:15:24,551
you'll create a subclass in UI dynamic behavior, and in

405
00:15:24,554 --> 00:15:28,088
the init method, you'll call this method addChildBehavior,

406
00:15:28,090 --> 00:15:31,391
and you'll add a gravity of collider, item behavior.

407
00:15:31,393 --> 00:15:32,815
You see what I mean?

408
00:15:32,816 --> 00:15:34,238
You'll add them as child behaviors.

409
00:15:34,239 --> 00:15:35,661
And now, this behavior will do all the things that those

410
00:15:35,664 --> 00:15:36,295
behaviors did.

411
00:15:38,032 --> 00:15:39,181
Okay? So,

412
00:15:39,182 --> 00:15:40,331
you'll have a kind of a big combined behavior.

413
00:15:40,334 --> 00:15:41,800
And I'll do that in the demo, so

414
00:15:41,802 --> 00:15:43,335
you can see what that looks like.

415
00:15:43,337 --> 00:15:48,906
All behaviors, know the dynamic animator they're in.

416
00:15:48,908 --> 00:15:52,042
And a behavior can only be in one dynamic animator at

417
00:15:52,044 --> 00:15:53,644
a time.

418
00:15:53,645 --> 00:15:55,245
So it has a property called dynamicAnimator.

419
00:15:55,247 --> 00:15:56,646
And it's read-only.

420
00:15:56,648 --> 00:15:58,381
And it will tell you.

421
00:15:58,383 --> 00:16:01,250
You can ask a collider who's animating

422
00:16:01,252 --> 00:16:03,919
right now, and it will tell you that the dynamicAnimator

423
00:16:03,921 --> 00:16:05,020
is animating it.

424
00:16:05,022 --> 00:16:08,123
Also, all dynamic behaviors will be sent

425
00:16:08,125 --> 00:16:10,625
the message will be moved to animator

426
00:16:10,627 --> 00:16:13,060
when they are going to switch to a different animator.

427
00:16:13,062 --> 00:16:15,696
Especially this is switching form not having an animator

428
00:16:15,698 --> 00:16:16,763
to having one.

429
00:16:16,765 --> 00:16:19,632
Or from having one to not having one anymore.

430
00:16:19,634 --> 00:16:21,067
Okay?

431
00:16:21,069 --> 00:16:23,269
That should be UIDynamicAnimator,

432
00:16:23,271 --> 00:16:25,404
question mark, that's an optional.

433
00:16:25,406 --> 00:16:27,172
Okay? Cuz it might be said,

434
00:16:27,174 --> 00:16:29,074
will move to animator nil,

435
00:16:29,076 --> 00:16:32,710
which means you're being taken out of an animator.

436
00:16:32,712 --> 00:16:36,847
Okay, very important property on UIDynamicBehavior called

437
00:16:36,849 --> 00:16:38,281
action.

438
00:16:38,283 --> 00:16:41,818
Action is a function, takes no arguments, returns nothing.

439
00:16:41,820 --> 00:16:46,722
99.999% of the time it's set with a closure, okay?

440
00:16:46,724 --> 00:16:50,492
And this piece of code will be executed every time this

441
00:16:50,494 --> 00:16:54,562
behavior acts upon its items.

442
00:16:54,564 --> 00:16:55,813
'Kay?

443
00:16:55,814 --> 00:16:57,063
That means it's called a lot.

444
00:16:57,066 --> 00:16:58,365
Okay?

445
00:16:58,367 --> 00:17:00,467
Imagine a gravity behavior,

446
00:17:00,469 --> 00:17:03,737
it's constantly accelerating something.

447
00:17:03,739 --> 00:17:05,371
So it's constantly acting upon it.

448
00:17:05,373 --> 00:17:07,573
So it's constantly gonna be calling this.

449
00:17:07,575 --> 00:17:09,475
So whatever code you put here,

450
00:17:09,477 --> 00:17:12,778
an action wants to be really efficient, okay?

451
00:17:12,780 --> 00:17:15,246
It wants to be very small, very compact.

452
00:17:15,248 --> 00:17:17,348
This is a place to do some optimization,

453
00:17:17,350 --> 00:17:19,216
have a data structure where you can store things, so

454
00:17:19,218 --> 00:17:20,517
you don't have to calculate things so much.

455
00:17:20,519 --> 00:17:22,686
Cuz this is going to get called a lot, all right?

456
00:17:22,688 --> 00:17:24,254
And you'll want your animations to be smooth,

457
00:17:24,256 --> 00:17:27,090
you don't want them to be bogged down with something

458
00:17:27,092 --> 00:17:30,192
heavy going on every single time it interacts, okay?

459
00:17:31,762 --> 00:17:35,130
One thing to be careful about this action method,

460
00:17:35,132 --> 00:17:38,299
is that it is a property on the behavior, so

461
00:17:38,301 --> 00:17:41,135
if that action method's code refers to the behavior,

462
00:17:41,137 --> 00:17:43,437
you're going to have a memory cycle, and

463
00:17:43,439 --> 00:17:46,173
so you need to do that unowned thing,

464
00:17:46,175 --> 00:17:49,743
the capture list that we were taking about.

465
00:17:49,745 --> 00:17:52,945
You have to do that to break the memory cycle, this is

466
00:17:52,947 --> 00:17:55,748
the case where you've got a property on an object and

467
00:17:55,750 --> 00:17:58,050
the implementation of the closure that you assign often

468
00:17:58,052 --> 00:18:00,218
refers back to the property.

469
00:18:00,220 --> 00:18:01,686
To the thing that the property is on,

470
00:18:01,688 --> 00:18:03,121
so be careful about that,

471
00:18:03,123 --> 00:18:07,591
let me show you a quick demo about that in a slide or two.

472
00:18:07,593 --> 00:18:10,327
The UIDynamicAnimator, it also has a delegate.

473
00:18:10,329 --> 00:18:11,461
Just like the CollisionBehavior

474
00:18:11,463 --> 00:18:13,796
has a delegate, the animator has a delegate, and

475
00:18:13,798 --> 00:18:15,264
it'll tell you only two things.

476
00:18:15,266 --> 00:18:19,068
It'll tell you when the animation has reached stasis.

477
00:18:19,070 --> 00:18:23,505
In other words, none of the behaviors need to do anything.

478
00:18:23,507 --> 00:18:24,606
Okay?

479
00:18:24,607 --> 00:18:25,706
Nothing is happening in the animator.

480
00:18:25,709 --> 00:18:27,608
Everything is still, and

481
00:18:27,610 --> 00:18:30,210
then it'll tell you when that's changed.

482
00:18:30,212 --> 00:18:30,911
Okay? And now, things

483
00:18:30,913 --> 00:18:32,279
are animating again.

484
00:18:32,280 --> 00:18:33,646
So every time it pauses, it'll tell you.

485
00:18:33,648 --> 00:18:35,782
And then, every time it continues, it'll tell you.

486
00:18:35,784 --> 00:18:37,717
So that way you can tell what's going on.

487
00:18:39,854 --> 00:18:43,155
When you design something that uses this stuff is,

488
00:18:43,157 --> 00:18:45,557
you want it to reach stasis.

489
00:18:45,559 --> 00:18:47,492
You don't ever want it to be just constantly

490
00:18:47,494 --> 00:18:49,344
animating, right?

491
00:18:49,345 --> 00:18:51,195
You want it to try and reach stasis, if possible.

492
00:18:51,197 --> 00:18:53,130
'Kay, now there might be cases where you actually

493
00:18:53,132 --> 00:18:55,732
are constantly animating, something's spinning, and

494
00:18:55,734 --> 00:18:57,534
it's constantly spinning.

495
00:18:57,536 --> 00:19:01,704
Okay, but you wanna design the system, unless that's really

496
00:19:01,706 --> 00:19:05,574
what you intend, you don't want things, classic one is.

497
00:19:05,576 --> 00:19:07,476
You have something with CollisionBehaviors.

498
00:19:07,478 --> 00:19:10,779
The thing flies off screen outside of the collision area,

499
00:19:10,781 --> 00:19:13,982
and then now it's flying off into outer space, and

500
00:19:13,984 --> 00:19:16,417
it's gonna continue to animate forever

501
00:19:16,419 --> 00:19:19,553
as it flies billions of points away, okay.

502
00:19:19,555 --> 00:19:22,189
It's never gonna stop, so you got to be careful about that.

503
00:19:22,191 --> 00:19:25,525
When things go outside of the area that you're animating,

504
00:19:25,527 --> 00:19:27,127
they don't stop animating.

505
00:19:27,129 --> 00:19:29,195
You need to notice that and

506
00:19:29,197 --> 00:19:32,064
take that thing out of the behaviors, so that they're no

507
00:19:32,066 --> 00:19:35,300
longer being accelerated off into nowhere or whatever.

508
00:19:35,302 --> 00:19:36,134
Okay?

509
00:19:36,135 --> 00:19:36,967
So be careful about that.

510
00:19:36,970 --> 00:19:38,536
That can happen in your assignment, of course.

511
00:19:38,538 --> 00:19:41,239
Because the bouncing ball goes off the bottom,

512
00:19:41,241 --> 00:19:42,457
it'll just keep going.

513
00:19:42,458 --> 00:19:43,674
Okay? Keep getting animated and

514
00:19:43,676 --> 00:19:45,209
never reach stasis.

515
00:19:45,211 --> 00:19:47,010
Unless you notice that and

516
00:19:47,012 --> 00:19:49,079
take the ball out of the view hierarchy probably.

517
00:19:49,081 --> 00:19:50,780
And also away from the behaviors.

518
00:19:51,883 --> 00:19:55,651
By the way, don't ever put a view into a behavior,

519
00:19:55,653 --> 00:19:59,254
okay, when that view is not on the view hierarchy

520
00:19:59,256 --> 00:20:01,856
of the reference view of the animator.

521
00:20:01,858 --> 00:20:04,292
Obviously, the animator wants to animate the thing, and

522
00:20:04,294 --> 00:20:06,927
if it's not in its view hierarchy, like it's in any

523
00:20:06,929 --> 00:20:08,362
view hierarchy or it's in a different one,

524
00:20:08,364 --> 00:20:10,664
the animator will basically crash your program and

525
00:20:10,666 --> 00:20:11,731
I tried to animated something,

526
00:20:11,733 --> 00:20:13,099
it's not in my view hierarchy anywhere.

527
00:20:14,135 --> 00:20:16,051
So don't do that.

528
00:20:16,052 --> 00:20:17,968
Also, don't animate things that are size 00.

529
00:20:19,139 --> 00:20:20,216
Okay.

530
00:20:20,217 --> 00:20:21,294
It really doesn't make and

531
00:20:21,295 --> 00:20:22,372
sense to do that because it's not visible anyway,

532
00:20:22,375 --> 00:20:23,607
but don't do that.

533
00:20:23,609 --> 00:20:24,641
Animator doesn't like that either.

534
00:20:25,844 --> 00:20:29,279
All right, quick sample here of memory cycle avoidance.

535
00:20:29,281 --> 00:20:31,647
I was talking about that action method.

536
00:20:31,649 --> 00:20:34,016
So here, I'm creating a pushBehavior, and

537
00:20:34,018 --> 00:20:35,217
I told you the pushBehavior,

538
00:20:35,219 --> 00:20:37,886
if it's instantaneous, it just sits around.

539
00:20:37,888 --> 00:20:39,587
Because the way you make a push happen is

540
00:20:39,589 --> 00:20:42,123
you create a pushBehavior, and you add it to an animator.

541
00:20:42,125 --> 00:20:45,626
As soon as you add it, it's gonna push any of its items.

542
00:20:45,628 --> 00:20:47,478
Okay?

543
00:20:47,479 --> 00:20:49,329
Well, after it's done, if it's an instantaneous push, not

544
00:20:49,331 --> 00:20:51,631
continuous, but instantaneous, well, it just sits there.

545
00:20:51,633 --> 00:20:53,266
Cuz it's been added to the animator.

546
00:20:53,268 --> 00:20:54,767
So it's just wasting space.

547
00:20:54,769 --> 00:20:58,237
So one of the way you can do this is in the pushBehavior's

548
00:20:58,239 --> 00:21:01,139
action, which I told you is called whenever the behavior

549
00:21:01,141 --> 00:21:02,707
acts on something.

550
00:21:02,709 --> 00:21:06,144
So after the pushBehavior acts and instantaneously pushes,

551
00:21:06,146 --> 00:21:09,280
well, you could just remove the thing from its animator.

552
00:21:09,282 --> 00:21:11,782
And I told you every behavior knows the animator it's in, so

553
00:21:11,784 --> 00:21:13,417
that's easy you can just do that one

554
00:21:13,419 --> 00:21:16,119
line of code in yellow there, pushBehavior, dynamicAnimator,

555
00:21:16,121 --> 00:21:19,255
removeBehavior, pushBehavior myself, okay.

556
00:21:19,257 --> 00:21:22,658
But in that closure, I'm referring to myself,

557
00:21:22,660 --> 00:21:25,327
pushBehavior because removing myself, okay.

558
00:21:25,329 --> 00:21:27,329
I'm also referring to myself because I'm getting my

559
00:21:27,331 --> 00:21:29,130
own dynamicAnimator.

560
00:21:29,132 --> 00:21:30,765
So this is bad.

561
00:21:30,766 --> 00:21:32,399
This is gonna cause a memory cycle here because

562
00:21:32,402 --> 00:21:34,235
that action closure.

563
00:21:34,237 --> 00:21:36,470
Right? It is gonna stay in memory,

564
00:21:36,472 --> 00:21:39,439
because the action property is pointing to it.

565
00:21:39,441 --> 00:21:41,808
And this push behavior is gonna stay in memory,

566
00:21:41,810 --> 00:21:43,843
because that closure is pointing to it.

567
00:21:43,845 --> 00:21:46,379
So since they're both pointing to each other,

568
00:21:46,381 --> 00:21:47,780
there's always gonna be a pointer to them.

569
00:21:47,782 --> 00:21:49,748
They'll always stay in memory forever.

570
00:21:49,750 --> 00:21:52,017
And I mean forever and ever.

571
00:21:52,019 --> 00:21:53,017
Okay? If you can't,

572
00:21:53,019 --> 00:21:54,318
no way to get rid of them.

573
00:21:54,320 --> 00:21:55,552
So how do we fix that?

574
00:21:55,554 --> 00:21:57,387
We put that unowned in there.

575
00:21:57,389 --> 00:22:00,323
So we put this capture list here, say that pushBehavior

576
00:22:00,325 --> 00:22:04,627
inside my closure is unowned, meaning don't capture it.

577
00:22:04,629 --> 00:22:07,596
I promise that it will be there when you want to use it,

578
00:22:07,598 --> 00:22:08,930
Mr. Closure says.

579
00:22:08,932 --> 00:22:11,800
You do not have to capture it and keep it in memory.

580
00:22:11,802 --> 00:22:13,518
Okay? And we know that's fine.

581
00:22:13,519 --> 00:22:15,235
Because obviously, the action wouldn't even be called if

582
00:22:15,238 --> 00:22:16,604
the view's pushBehavior didn't exist.

583
00:22:16,606 --> 00:22:17,971
So this is good.

584
00:22:17,973 --> 00:22:19,006
This code's for sure going to work.

585
00:22:20,175 --> 00:22:21,274
Okay? You have to do this a lot

586
00:22:21,276 --> 00:22:22,408
with actions.

587
00:22:22,409 --> 00:22:23,541
And you'll probably have to do this in your assignment,

588
00:22:23,544 --> 00:22:25,277
when you use an action.

589
00:22:25,279 --> 00:22:27,446
Okay? And I encourage you to try and

590
00:22:27,448 --> 00:22:29,080
make your pushBehavior do this as well.

591
00:22:29,082 --> 00:22:31,849
It's not a required task, but get your pushBehavior to clean

592
00:22:31,851 --> 00:22:33,517
itself up after it's done pushing.

593
00:22:34,920 --> 00:22:36,053
All right, so let's do this demo.

594
00:22:39,458 --> 00:22:40,623
Any questions about all that?

595
00:22:41,726 --> 00:22:43,359
Again, feel free to interrupt me.

596
00:22:43,361 --> 00:22:46,561
Coming up this week, Friday, we're going to learn

597
00:22:46,563 --> 00:22:49,064
about the Parse framework, which is a way to

598
00:22:49,066 --> 00:22:51,132
basically store your data on the network.

599
00:22:52,769 --> 00:22:55,302
So for if you're building some sort of final project, or

600
00:22:55,304 --> 00:22:57,504
you wanna back end or something,

601
00:22:57,506 --> 00:23:02,975
Parse is really simple, nice asynchronous using blocks.

602
00:23:02,977 --> 00:23:04,944
Closure's a way to do that.

603
00:23:04,946 --> 00:23:06,011
And then next week,

604
00:23:06,013 --> 00:23:07,813
we're gonna talk about a variety of topics.

605
00:23:07,815 --> 00:23:10,382
We're finally gonna talk about modal segue way a little bit

606
00:23:10,384 --> 00:23:11,916
and the application life cycle.

607
00:23:12,919 --> 00:23:15,252
And core motion,

608
00:23:15,253 --> 00:23:17,586
which is the gyro and accelerometer and that stuff.

609
00:23:18,890 --> 00:23:19,455
Okay?

610
00:23:19,457 --> 00:23:22,892
I believe we'll have just enough time for this demo.

611
00:23:22,894 --> 00:23:27,329
If I run a little long, you guys know what to do.

612
00:23:27,331 --> 00:23:29,330
So let's start here.

613
00:23:29,332 --> 00:23:30,465
Create new project.

614
00:23:31,467 --> 00:23:33,634
We always use single view in this class,

615
00:23:33,636 --> 00:23:34,868
we'll call it DropIt.

616
00:23:34,870 --> 00:23:36,202
We're dropping some things.

617
00:23:36,204 --> 00:23:38,838
I'll put it in the same place we always put it.

618
00:23:38,840 --> 00:23:41,974
Here we go.

619
00:23:41,975 --> 00:23:45,109
Now I'm going to clean up this stuff.

620
00:23:45,112 --> 00:23:47,979
Okay, I don't need this view controller, I'm going to have

621
00:23:47,981 --> 00:23:50,615
a custom view controller, we're not gonna use the one.

622
00:23:50,617 --> 00:23:52,216
I don't like the name of this, I'm not gonna use.

623
00:23:52,218 --> 00:23:55,319
This one.

624
00:23:55,320 --> 00:23:58,421
My story board right here, I'm going to right off

625
00:23:58,424 --> 00:24:04,127
the bat create a new subclass for my view controller.

626
00:24:04,129 --> 00:24:05,995
So it's going to be a UIViewController.

627
00:24:05,997 --> 00:24:08,630
I'm gonna call it DropitViewController.

628
00:24:10,934 --> 00:24:12,434
Probably could have renamed that other thing.

629
00:24:12,436 --> 00:24:14,569
It probably would have been just as good.

630
00:24:14,571 --> 00:24:16,037
So here's Dropit.

631
00:24:16,039 --> 00:24:19,907
I'm gonna get rid of all this in here.

632
00:24:19,909 --> 00:24:25,879
In my storyboard, let's set the class here to be Dropit.

633
00:24:25,881 --> 00:24:29,282
The only UI that my Dropit is gonna have is a custom view,

634
00:24:29,284 --> 00:24:32,685
and actually, I'm gonna start out with a generic view.

635
00:24:32,687 --> 00:24:34,853
In your homework assignments, you might be able to get away,

636
00:24:34,855 --> 00:24:37,356
depending on how you architect things, with the generic

637
00:24:37,358 --> 00:24:41,359
view here to contain your bricks and bouncing ball.

638
00:24:41,361 --> 00:24:43,444
So I'm going to have this.

639
00:24:43,445 --> 00:24:45,528
I'm gonna make sure that my constraints are set here.

640
00:24:45,531 --> 00:24:48,832
So let's Reset to Suggested Constraints.

641
00:24:48,834 --> 00:24:50,250
I always like to check them,

642
00:24:50,251 --> 00:24:51,667
make sure there's no magic numbers or anything.

643
00:24:51,670 --> 00:24:53,336
That all looks good to me.

644
00:24:53,338 --> 00:24:58,574
I'm gonna create a outlet to this thing, right there.

645
00:24:58,576 --> 00:25:01,910
I'm gonna call that my game view, so this is going to be

646
00:25:01,912 --> 00:25:04,746
the view that contains my little Dropit game.

647
00:25:04,748 --> 00:25:08,049
It's not much of a game, but kind of a game.

648
00:25:08,051 --> 00:25:09,450
All right, so there we go.

649
00:25:09,452 --> 00:25:12,653
So, what is my Dropit going to do here?

650
00:25:12,655 --> 00:25:18,191
It's going to, along the top of my view, I'm

651
00:25:18,193 --> 00:25:22,062
going to drop little squares, okay, right along the top.

652
00:25:22,064 --> 00:25:23,896
So first let's just get them dropped along the top.

653
00:25:23,898 --> 00:25:26,365
And then I'm going to add some gravity, and

654
00:25:26,367 --> 00:25:28,267
they're going to drop and fall.

655
00:25:28,269 --> 00:25:29,034
Okay? That's why

656
00:25:29,036 --> 00:25:29,768
they're called drops.

657
00:25:29,770 --> 00:25:31,236
They're going to fall down.

658
00:25:31,237 --> 00:25:32,703
So I'm gonna put these drops along the top, and

659
00:25:32,706 --> 00:25:34,672
then later we'll add some gravity.

660
00:25:34,674 --> 00:25:38,842
So let's go ahead and do the, putting them along the top

661
00:25:38,844 --> 00:25:42,545
first, pretty straightforward to do.

662
00:25:42,547 --> 00:25:47,149
So, I'm going to have the drops be evenly spaced along

663
00:25:47,151 --> 00:25:50,019
the top, and I'm going to have a public variable, or

664
00:25:50,021 --> 00:25:53,255
whatever you want to call it, called dropsPerRow.

665
00:25:54,257 --> 00:25:56,557
It's just gonna be an integer that says how many of these

666
00:25:56,559 --> 00:25:58,059
little squares go across the top.

667
00:25:58,061 --> 00:26:00,227
And so I'll do ten but I can set it to whatever I want.

668
00:26:00,229 --> 00:26:01,762
I like my UI to be configurable.

669
00:26:01,764 --> 00:26:04,497
Of course in your homework you're gonna want that because

670
00:26:04,499 --> 00:26:06,966
part of your homework is to add a settings panel, but

671
00:26:06,968 --> 00:26:08,768
you set a lot of configurable things.

672
00:26:08,770 --> 00:26:11,437
So you want to design your code to not be hard-coded all

673
00:26:11,439 --> 00:26:13,122
the time.

674
00:26:13,123 --> 00:26:14,806
So here I'm going to make this to be number I can set.

675
00:26:14,808 --> 00:26:18,276
And that lets me have a drop size, okay,

676
00:26:18,278 --> 00:26:21,045
which is going to be the size of each drop.

677
00:26:21,047 --> 00:26:22,446
And I'm gonna calculate that as well.

678
00:26:22,448 --> 00:26:23,947
I'm gonna have it be a calculator property,

679
00:26:23,949 --> 00:26:26,283
based on this dropsPerRow.

680
00:26:26,285 --> 00:26:28,184
I'm gonna have it be square.

681
00:26:28,186 --> 00:26:30,687
So we'll have the width and height be the same.

682
00:26:30,689 --> 00:26:34,657
And I'm gonna make it equal to the gameView's bounds

683
00:26:34,659 --> 00:26:38,260
dot size dot width, divided by the dropsPerRow.

684
00:26:38,262 --> 00:26:43,798
So I'm just gonna take my width,

685
00:26:43,800 --> 00:26:46,467
available width of my view, and just divide it up evenly,

686
00:26:46,469 --> 00:26:50,071
so that the drops exactly fill the space.

687
00:26:50,073 --> 00:26:55,442
And so now I can return a CGSize that

688
00:26:55,444 --> 00:26:58,878
is both this width and this height.

689
00:26:58,880 --> 00:27:00,913
Okay, so now I know my drop size.

690
00:27:00,915 --> 00:27:05,651
I'm going to add a gesture, which is the tap gesture.

691
00:27:05,653 --> 00:27:07,603
When I put a tap gesture,

692
00:27:07,604 --> 00:27:09,554
I'm gonna put one of these drops into my view.

693
00:27:09,556 --> 00:27:10,989
So let's do that.

694
00:27:10,991 --> 00:27:12,790
Let's go here to drag and

695
00:27:12,792 --> 00:27:17,761
drop gesture out here, tap gesture right here.

696
00:27:17,763 --> 00:27:20,397
So I'm gonna drag this on here, and

697
00:27:20,399 --> 00:27:22,599
bring up my document outline.

698
00:27:22,601 --> 00:27:24,200
Here's my tap gesture right here.

699
00:27:24,202 --> 00:27:25,568
So I'm gonna control drag.

700
00:27:25,570 --> 00:27:29,438
I'm gonna call this gesture drop.

701
00:27:29,440 --> 00:27:31,540
It's a good name cuz that's what it does.

702
00:27:31,542 --> 00:27:34,175
It drops one of these things.

703
00:27:34,177 --> 00:27:35,743
Connect it. So here it is.

704
00:27:35,745 --> 00:27:38,245
I could put the code to do all the dropping here, but

705
00:27:38,247 --> 00:27:40,847
I'm actually going to put it in another method.

706
00:27:41,983 --> 00:27:43,316
Call drop.

707
00:27:43,318 --> 00:27:44,917
Just because it's not necessarily something

708
00:27:44,919 --> 00:27:46,185
that could only be done by gesture.

709
00:27:46,187 --> 00:27:49,454
Maybe programmatically one could drop things as well.

710
00:27:49,456 --> 00:27:53,058
So I don't really want to put inside that gesture.

711
00:27:53,060 --> 00:27:55,326
So all the gesture you're gonna do is do this drop.

712
00:27:55,328 --> 00:27:57,461
The drop just needs to figure out where the drop is,

713
00:27:57,463 --> 00:28:01,064
so let's get, actually let's make more space here first.

714
00:28:03,635 --> 00:28:06,703
This, I need a lot more space than that.

715
00:28:06,705 --> 00:28:08,270
Okay, so we need to figure out where the drop is.

716
00:28:08,272 --> 00:28:10,506
So I'm going to make it's frame, which is really easy.

717
00:28:10,508 --> 00:28:13,208
I'm just gonna first of all,

718
00:28:13,210 --> 00:28:16,311
create one that is at zero, zero.

719
00:28:16,313 --> 00:28:20,981
Use this nice CGPointZero by the way, which is zero, zero.

720
00:28:20,983 --> 00:28:22,783
And the size is, of course, our dropSize.

721
00:28:25,120 --> 00:28:27,053
So now I've got drop at zero, zero.

722
00:28:27,055 --> 00:28:30,923
And now, I move it along somewhere along there.

723
00:28:30,925 --> 00:28:35,594
So, I'm gonna move it to frame dot origin dot x equals

724
00:28:35,596 --> 00:28:38,830
CGFloat dot random, dropsPerRow.

725
00:28:38,832 --> 00:28:41,299
And you're probably like whoa, CGFloat dot random,

726
00:28:41,301 --> 00:28:43,367
you didn't tell me about that cool function.

727
00:28:43,369 --> 00:28:45,936
Well, that's because there's no such function, but

728
00:28:45,938 --> 00:28:49,739
I'm gonna write that function right now, really quick.

729
00:28:49,741 --> 00:28:50,873
There it is.

730
00:28:50,875 --> 00:28:51,707
Okay?

731
00:28:51,709 --> 00:28:52,941
So all it does is,

732
00:28:52,943 --> 00:28:56,878
it just uses arc4random to create a random float

733
00:28:56,880 --> 00:28:59,647
between zero and one less than this maximum.

734
00:28:59,649 --> 00:29:02,417
So here I'm gonna get a random float between zero and

735
00:29:02,419 --> 00:29:04,485
dropsPerRow minus one.

736
00:29:04,487 --> 00:29:06,120
Okay, that's cool.

737
00:29:06,122 --> 00:29:08,989
And then I'm gonna multiply that by times dropSize dot

738
00:29:08,991 --> 00:29:10,457
width cuz I'm gonna move it off.

739
00:29:10,459 --> 00:29:12,658
So I just took my drop, and I made it over.

740
00:29:12,660 --> 00:29:14,527
And it would be in a certain spot, so

741
00:29:14,529 --> 00:29:16,128
I'm gonna create my dropView.

742
00:29:16,130 --> 00:29:17,696
It's just gonna be UIView.

743
00:29:17,698 --> 00:29:20,031
I'm gonna use the frame initializer here,

744
00:29:20,033 --> 00:29:22,533
use that frame I just created above.

745
00:29:22,535 --> 00:29:27,404
I'm gonna set the dropView's background color to be UIColor

746
00:29:27,406 --> 00:29:31,875
random, another thing I added down here below.

747
00:29:31,877 --> 00:29:36,112
Just picked one of five random colors there in my rote.

748
00:29:36,114 --> 00:29:37,563
Notice, by the way,

749
00:29:37,564 --> 00:29:39,013
that when I added these extensions to UIFloat and

750
00:29:39,016 --> 00:29:40,849
UIColor, I made them private.

751
00:29:40,851 --> 00:29:42,851
That means only I can use them.

752
00:29:42,853 --> 00:29:45,887
But it also means the name won't conflict with someone

753
00:29:45,889 --> 00:29:48,756
else if someone else writes their own CGFloat dot random

754
00:29:48,758 --> 00:29:50,024
that takes an int.

755
00:29:50,026 --> 00:29:51,758
Theirs will work in their file, and

756
00:29:51,760 --> 00:29:52,759
mine will work in my file.

757
00:29:52,761 --> 00:29:55,028
Okay, so it's private to this file.

758
00:29:55,030 --> 00:29:56,729
So that's one nice thing about extensions,

759
00:29:56,731 --> 00:29:59,831
you can kind of control the privacy of extensions.

760
00:30:00,801 --> 00:30:02,834
So there I have my dropView.

761
00:30:02,835 --> 00:30:04,868
Now I'm just gonna add it to my gameView, addSubview.

762
00:30:04,871 --> 00:30:07,471
We really haven't had you doing addSubview.

763
00:30:07,473 --> 00:30:10,607
But cuz you've been doing all the views in your storyboard.

764
00:30:10,609 --> 00:30:12,609
But in your homework you're going to be adding your

765
00:30:12,611 --> 00:30:16,246
bricks, views, and all that stuff, using addSubview.

766
00:30:16,248 --> 00:30:17,680
Probably your storyboard's just going to be

767
00:30:17,682 --> 00:30:18,731
completely blank.

768
00:30:18,732 --> 00:30:19,781
Or maybe you might have the score and

769
00:30:19,784 --> 00:30:21,751
some other things in there.

770
00:30:21,752 --> 00:30:23,719
But the bricks and the paddle, and ball,

771
00:30:23,721 --> 00:30:24,986
that's all going to be added.

772
00:30:24,988 --> 00:30:26,288
You're gonna add with addSubview.

773
00:30:26,289 --> 00:30:27,589
That's part of what this assignment is about.

774
00:30:27,591 --> 00:30:30,324
So you get some experience creating and

775
00:30:30,326 --> 00:30:31,926
adding views in code.

776
00:30:31,928 --> 00:30:32,993
Okay? So that's what we're doing.

777
00:30:32,995 --> 00:30:35,128
So let's go see what this looks like.

778
00:30:35,130 --> 00:30:38,198
Hopefully when we tap we'll get a random square along

779
00:30:38,200 --> 00:30:41,167
the top of our view here.

780
00:30:41,169 --> 00:30:42,201
So tap, we got one.

781
00:30:42,203 --> 00:30:43,602
Good, we're getting them.

782
00:30:43,604 --> 00:30:45,937
So here I'm tapping them, this is great.

783
00:30:45,939 --> 00:30:48,106
Okay, so we're adding these things along the top,

784
00:30:48,108 --> 00:30:50,041
now I'm gonna add gravity.

785
00:30:50,043 --> 00:30:51,776
Okay, I'm going to add a gravitational field, and

786
00:30:51,778 --> 00:30:53,177
it's going to apply to all these things.

787
00:30:53,179 --> 00:30:55,412
It's going to pull them all down to the bottom of

788
00:30:55,414 --> 00:30:56,046
the screen.

789
00:30:56,048 --> 00:30:57,080
Okay?

790
00:30:57,082 --> 00:30:59,682
So these all will just fall down.

791
00:30:59,684 --> 00:31:03,385
Turns out this very, very easy to do, okay?

792
00:31:03,387 --> 00:31:06,822
All I need to do is create a gravitational field so

793
00:31:06,824 --> 00:31:12,360
I'm going to say, let gravity equal a UIGravityBehaviour.

794
00:31:12,362 --> 00:31:14,628
Okay, so boom, I have a UIGravityBehavior.

795
00:31:14,630 --> 00:31:18,332
I'm gonna take the default magnitude and direction which

796
00:31:18,334 --> 00:31:21,735
is down, at a thousand points per second per second.

797
00:31:21,737 --> 00:31:23,603
So that's perfectly fine to me.

798
00:31:23,605 --> 00:31:26,806
Of course I also need a dynamic animator.

799
00:31:26,808 --> 00:31:28,207
Okay?

800
00:31:28,208 --> 00:31:29,607
So I'm going to create a dynamic animator here.

801
00:31:31,245 --> 00:31:38,616
Now, I wanna say this, referenceView is gameView.

802
00:31:38,618 --> 00:31:39,283
Okay? But I'm not gonna

803
00:31:39,285 --> 00:31:41,802
be able to do this.

804
00:31:41,803 --> 00:31:44,320
Now, a lot of you tripped into this, on your, assignments.

805
00:31:44,323 --> 00:31:45,989
I saw on Piazza, a lot of questions about this.

806
00:31:45,991 --> 00:31:47,591
You're, like, oh, what, what's going on here?

807
00:31:47,593 --> 00:31:49,659
And you click this warning, and it says,

808
00:31:49,661 --> 00:31:50,960
gameView is not a part of.

809
00:31:50,962 --> 00:31:54,030
DropitViewController, of course it is, it's right here.

810
00:31:54,032 --> 00:31:56,598
What the heck is going on?

811
00:31:56,600 --> 00:31:59,134
And hopefully all of you have figured out that

812
00:31:59,136 --> 00:32:00,602
the reason that's happening is because

813
00:32:00,604 --> 00:32:03,638
I'm in the middle of initializing here.

814
00:32:03,640 --> 00:32:07,208
Okay, this is initializing this variable.

815
00:32:07,210 --> 00:32:09,877
And you cannot access your own properties and

816
00:32:09,879 --> 00:32:12,746
methods until you're fully initialized.

817
00:32:12,748 --> 00:32:14,614
So obviously, you can't access them while you're

818
00:32:14,616 --> 00:32:16,916
initializing, by definition, so that's the problem.

819
00:32:16,918 --> 00:32:18,751
So, how do I get out of this conundrum?

820
00:32:18,753 --> 00:32:22,154
Because UIDyanmicAnimator needs this game view

821
00:32:22,156 --> 00:32:23,956
as its reference.

822
00:32:23,957 --> 00:32:25,757
Well, one thing is, I could make this an optional and

823
00:32:25,759 --> 00:32:28,927
set to nil, and then the view did load, when I know that's

824
00:32:28,929 --> 00:32:32,030
set I could set the, I could create the animator there.

825
00:32:32,032 --> 00:32:33,297
Yeah, you could do that.

826
00:32:33,299 --> 00:32:35,599
Another way to do it is using a lazy.

827
00:32:35,601 --> 00:32:38,552
Variable. So

828
00:32:38,553 --> 00:32:41,504
I'm gonna make this var lazy and I'm gonna set its initial

829
00:32:41,506 --> 00:32:46,075
value equal to the result of executing a closure.

830
00:32:47,611 --> 00:32:49,244
Okay.

831
00:32:49,246 --> 00:32:51,312
So, this is not gonna happen,

832
00:32:51,314 --> 00:32:53,848
this is not going to get initialized,

833
00:32:53,850 --> 00:32:57,385
until someone actually asks for this animator.

834
00:32:57,387 --> 00:33:00,421
And once they ask for it, I'm gonna execute this closure

835
00:33:00,423 --> 00:33:02,456
by just having the closure with parentheses.

836
00:33:02,458 --> 00:33:05,125
It takes no arguments, so I just call it with parentheses.

837
00:33:05,127 --> 00:33:06,859
And it's going to execute this closure.

838
00:33:06,861 --> 00:33:10,429
Now, this closure better return a UIDynamicAnimator.

839
00:33:10,431 --> 00:33:12,598
Okay, because I'm setting it equal to the result.

840
00:33:12,600 --> 00:33:18,136
And in fact, it's going to, because I'm gonna say, let

841
00:33:18,138 --> 00:33:23,240
lazilyCreatedDynamicAnimator equal that, okay?

842
00:33:23,242 --> 00:33:24,441
Now, this is inside a closure.

843
00:33:24,443 --> 00:33:28,078
So I'm gonna want to say self.gameView, right?

844
00:33:28,080 --> 00:33:31,014
And then I'm just going to return

845
00:33:31,016 --> 00:33:34,117
lazilyCreatedDynamicAnimator.

846
00:33:34,119 --> 00:33:34,917
Okay?

847
00:33:34,919 --> 00:33:38,320
This kind of solves the problem.

848
00:33:38,322 --> 00:33:39,654
Okay? I don't have any warnings,

849
00:33:39,656 --> 00:33:42,891
but you gotta be careful you better not call this

850
00:33:42,893 --> 00:33:44,192
before this gets set.

851
00:33:45,261 --> 00:33:46,994
Because this is going to be nill, you're

852
00:33:46,996 --> 00:33:49,062
going to have a reference view nill, your animator is

853
00:33:49,064 --> 00:33:50,964
going to get created with no reference view.

854
00:33:50,966 --> 00:33:52,899
It ain't going to work.

855
00:33:52,901 --> 00:33:54,317
Okay?

856
00:33:54,318 --> 00:33:55,734
So you gotta be careful about when you call this.

857
00:33:55,737 --> 00:33:57,436
Okay? When you access this property.

858
00:33:57,438 --> 00:33:58,970
So I'm not gonna act as this property until I

859
00:33:58,972 --> 00:34:01,206
get to viewDidLoad, cuz then I'll know

860
00:34:01,208 --> 00:34:04,208
that this outlet right here has been set.

861
00:34:04,210 --> 00:34:05,927
Okay?

862
00:34:05,928 --> 00:34:07,645
So let's go ahead and do viewDidLoad, in fact.

863
00:34:07,647 --> 00:34:11,048
So in viewDidLoad, all I'm gonna do is.

864
00:34:12,551 --> 00:34:15,651
Say animator, add behavior gravity.

865
00:34:16,620 --> 00:34:19,521
So now, I have a gravitational field,

866
00:34:19,523 --> 00:34:22,157
I've added it to an animator, so an animator is now going to

867
00:34:22,159 --> 00:34:24,792
be animating the behavior of items in there.

868
00:34:24,794 --> 00:34:27,395
The only thing I need to do is say

869
00:34:27,397 --> 00:34:30,297
which items are affected by gravity.

870
00:34:30,299 --> 00:34:31,431
So I'm gonna go right down and

871
00:34:31,433 --> 00:34:36,402
say, gravity add item, my drop view.

872
00:34:36,404 --> 00:34:39,839
Now the instance I say this, the instancy animator,

873
00:34:39,841 --> 00:34:43,375
the instance the behavior gets added to the animator, all

874
00:34:43,377 --> 00:34:46,978
items in that gravity field are going to start animating.

875
00:34:46,980 --> 00:34:49,514
Now I can add those items later and then they'll start

876
00:34:49,516 --> 00:34:52,383
animating, I can take them out and it'll stop animating.

877
00:34:52,385 --> 00:34:54,585
It's all instantaneous, okay.

878
00:34:54,587 --> 00:34:57,354
So if I run now, since I have an animator and

879
00:34:57,356 --> 00:34:58,889
a gravitational field and

880
00:34:58,891 --> 00:35:02,492
I put the items in there, they fall, okay.

881
00:35:02,494 --> 00:35:03,944
Now they're accelerating.

882
00:35:03,945 --> 00:35:05,395
See how they're getting faster and faster at the bottom?

883
00:35:05,397 --> 00:35:06,495
They're accelerating due to gravity and

884
00:35:06,497 --> 00:35:08,997
I can have as many of them as I want.

885
00:35:08,999 --> 00:35:12,768
Okay and they will accelerate.

886
00:35:12,770 --> 00:35:15,236
They'll all be accelerating their own

887
00:35:15,238 --> 00:35:17,005
gravitational acceleration.

888
00:35:17,007 --> 00:35:18,773
Okay now this is great except for

889
00:35:18,775 --> 00:35:21,075
they're just falling off the end and they're gone.

890
00:35:21,077 --> 00:35:23,343
And really what I want is for them to stay on screen.

891
00:35:23,345 --> 00:35:26,079
So I'm gonna create a collision behavior where

892
00:35:26,081 --> 00:35:30,282
the edges of my reference view here are going to.

893
00:35:30,284 --> 00:35:33,419
Stop these things and they are gonna bounce off okay?

894
00:35:33,421 --> 00:35:36,521
So they are going to collide, again really easy to do,

895
00:35:36,523 --> 00:35:39,524
I'm just gonna go up here and create a collision behavior.

896
00:35:39,526 --> 00:35:40,725
I'm gonna do these same thing here and

897
00:35:40,727 --> 00:35:42,093
do a lazy version of this and

898
00:35:42,095 --> 00:35:43,527
I'll show you why I'm doing that.

899
00:35:43,529 --> 00:35:45,195
I'm gonna call it my collider.

900
00:35:45,197 --> 00:35:48,264
It's a UI collision behavior.

901
00:35:49,267 --> 00:35:55,137
I'm gonna set it equal to executing a closure.

902
00:35:55,139 --> 00:36:01,376
I'll say let my lazilyCreatedCollider

903
00:36:01,378 --> 00:36:06,146
equal UICollisionBehavior.

904
00:36:06,148 --> 00:36:07,080
Okay?

905
00:36:07,082 --> 00:36:07,814
And.

906
00:36:09,517 --> 00:36:12,051
Then, oops.

907
00:36:12,053 --> 00:36:14,687
Don't want that there cuz I'm not creating it there.

908
00:36:14,689 --> 00:36:16,555
There we go.

909
00:36:16,557 --> 00:36:19,424
So, now, the reason I did this is not because I have this

910
00:36:19,426 --> 00:36:21,859
reference view problem or anything like that.

911
00:36:21,861 --> 00:36:24,495
It's just that I wanna configure this thing.

912
00:36:24,497 --> 00:36:25,680
Okay?

913
00:36:25,681 --> 00:36:26,864
And one thing I wanna configure here is

914
00:36:26,866 --> 00:36:30,400
that I want it to translate the reference bounds.

915
00:36:30,402 --> 00:36:31,901
Into a boundary.

916
00:36:31,903 --> 00:36:34,670
That means the edges of my reference view are going to

917
00:36:34,672 --> 00:36:36,789
be a boundary.

918
00:36:36,790 --> 00:36:38,907
So, anything, any items that are in this collider will

919
00:36:38,909 --> 00:36:41,143
bounce off of that, those bounds.

920
00:36:41,145 --> 00:36:41,743
Okay?

921
00:36:41,745 --> 00:36:42,877
And now I'll return.

922
00:36:42,879 --> 00:36:45,479
So here you can see two different reasons.

923
00:36:45,481 --> 00:36:49,249
That I've used for using this lazy with the closure.

924
00:36:49,251 --> 00:36:51,501
One is,

925
00:36:51,502 --> 00:36:53,752
there was something I couldn't access during initialization,

926
00:36:53,755 --> 00:36:57,623
another one is I wanted to initialize some state, okay?

927
00:36:57,625 --> 00:37:01,593
Those are both valid reasons to do this lazy business.

928
00:37:01,595 --> 00:37:02,995
Okay?

929
00:37:02,996 --> 00:37:04,396
So, I need to add that to the animator.

930
00:37:06,433 --> 00:37:10,535
Collider and of course I need, if I want these drops

931
00:37:10,537 --> 00:37:13,471
to collide, they need to be added to the collider as well.

932
00:37:13,473 --> 00:37:16,740
Okay?

933
00:37:16,742 --> 00:37:17,874
And that's it.

934
00:37:17,876 --> 00:37:21,077
That's all, again, this stuff is amazingly simple,

935
00:37:21,079 --> 00:37:24,980
you just add the behaviors and things will start behaving.

936
00:37:24,982 --> 00:37:26,382
Okay? So let's watch.

937
00:37:26,384 --> 00:37:27,582
What happens here.

938
00:37:27,584 --> 00:37:28,216
So we drop one in.

939
00:37:28,218 --> 00:37:29,050
Oh see?

940
00:37:29,052 --> 00:37:30,317
Bounce at the bottom.

941
00:37:30,319 --> 00:37:33,354
Didn't bounce very much, it's not a very big bounce, but

942
00:37:33,356 --> 00:37:34,855
it did bounce.

943
00:37:34,856 --> 00:37:36,355
We're gonna make it bounce some more in a minute here.

944
00:37:36,358 --> 00:37:38,024
But again, if I send a whole bunch of them down,

945
00:37:38,026 --> 00:37:40,059
not only do they bounce off the bottom,

946
00:37:40,061 --> 00:37:42,361
they'll bounce off of each other a little bit, too.

947
00:37:42,363 --> 00:37:44,430
And they also can rotate.

948
00:37:44,432 --> 00:37:46,365
So if I send too many of them down here, and

949
00:37:46,367 --> 00:37:49,067
if they're getting a little, oh, look.

950
00:37:49,069 --> 00:37:50,468
Oh no!

951
00:37:50,470 --> 00:37:52,970
Okay, oh no, it's collapsed.

952
00:37:52,972 --> 00:37:55,906
Okay, so these things are allowed to tilt and rotate and

953
00:37:55,908 --> 00:37:57,407
they can all just collapse and fall down.

954
00:37:58,510 --> 00:37:59,509
Okay?

955
00:37:59,511 --> 00:38:00,676
Cuz that's the physics of them.

956
00:38:00,678 --> 00:38:02,878
When they bounce, they might hit a little ledge and

957
00:38:02,880 --> 00:38:07,115
boom, since they can rotate, they'll tilt and tip over.

958
00:38:07,117 --> 00:38:07,682
Okay?

959
00:38:09,585 --> 00:38:11,051
All right, so that's that.

960
00:38:11,053 --> 00:38:16,489
Now what if I had my game here, and I wanted to not

961
00:38:16,491 --> 00:38:19,192
have them tilt like that, I wanted them to stay in their

962
00:38:19,194 --> 00:38:21,994
nice neat rows, and also I want them to bounce more.

963
00:38:21,996 --> 00:38:23,829
I don't want such a little tiny bounce,

964
00:38:23,831 --> 00:38:24,830
that's not very exciting.

965
00:38:24,832 --> 00:38:26,531
I want a big old bounce okay?

966
00:38:26,533 --> 00:38:27,699
Off each other and off the bottom.

967
00:38:27,701 --> 00:38:28,966
So how would I do that?

968
00:38:28,968 --> 00:38:32,136
Well I would add a dynamic item behavior that we

969
00:38:32,138 --> 00:38:34,671
talked about in lecture, but it started to get the point

970
00:38:34,673 --> 00:38:37,474
here where I have an awful lot of different behaviors acting

971
00:38:37,476 --> 00:38:39,242
on each of these drops.

972
00:38:39,244 --> 00:38:41,310
So this is the time where I'm probably like,

973
00:38:41,312 --> 00:38:45,113
I wanna create my own dynamic behavior that is a composite

974
00:38:45,115 --> 00:38:46,314
of all these things.

975
00:38:46,316 --> 00:38:47,682
The collider, the gravity,

976
00:38:47,684 --> 00:38:50,785
and the bounciness and the don't rotate.

977
00:38:50,787 --> 00:38:52,386
All that, so I want it all kind of in one thing.

978
00:38:52,388 --> 00:38:53,553
So, let's do that.

979
00:38:53,555 --> 00:38:55,789
We'll just do that by creating a new file here.

980
00:38:55,791 --> 00:38:58,558
New > File.

981
00:38:58,560 --> 00:39:00,693
And it's a Cocoa Touch class.

982
00:39:00,695 --> 00:39:04,229
It's gonna be a UIDynamicBehavior subclass,

983
00:39:04,231 --> 00:39:04,796
okay?

984
00:39:04,798 --> 00:39:06,364
I'm gonna call it.

985
00:39:06,366 --> 00:39:08,265
DropitBehavior, because that's what it is.

986
00:39:08,267 --> 00:39:11,135
It's the behavior for these Dropit things.

987
00:39:11,137 --> 00:39:12,235
So I could call DropitBehavior.

988
00:39:12,237 --> 00:39:13,570
I could maybe call it DropBehavior,

989
00:39:13,572 --> 00:39:14,604
I like it DropitBehavior,

990
00:39:14,606 --> 00:39:16,806
cuz it's really the behavior of my whole,

991
00:39:16,808 --> 00:39:19,641
all the things participating in my Dropit game here.

992
00:39:19,643 --> 00:39:21,510
So here's a DropitBehavior.

993
00:39:21,512 --> 00:39:23,611
Doesn't have anything in it to start.

994
00:39:23,613 --> 00:39:26,214
And all I'm gonna do is basically take

995
00:39:26,216 --> 00:39:28,449
these things like gravity and collider.

996
00:39:28,451 --> 00:39:35,355
Out of here, okay, and put him over in here like that.

997
00:39:35,357 --> 00:39:38,642
Oops, sorry.

998
00:39:38,643 --> 00:39:41,928
And then I'm going to override init from UIDynamicBehavior,

999
00:39:41,930 --> 00:39:43,062
right?

1000
00:39:43,063 --> 00:39:44,195
This is a subclass of UIDynamicBehavior.

1001
00:39:44,198 --> 00:39:46,231
So I'll call super init.

1002
00:39:46,233 --> 00:39:50,268
And then all I'm gonna do is add child behaviors for

1003
00:39:50,270 --> 00:39:52,387
gravity.

1004
00:39:52,388 --> 00:39:54,505
And add a child behavior for the collider.

1005
00:39:54,507 --> 00:39:57,475
Okay, so now that I've added these behaviors,

1006
00:39:57,477 --> 00:40:01,411
now my dropit behavior behaves like those things do combined.

1007
00:40:02,647 --> 00:40:04,036
Okay?

1008
00:40:04,037 --> 00:40:05,426
Cuz they're children behavior of me.

1009
00:40:05,427 --> 00:40:06,816
So this is a awesome way to create a powerful behavior

1010
00:40:06,818 --> 00:40:09,218
just by taking other powerful behaviors.

1011
00:40:09,220 --> 00:40:13,422
I'm also gonna have an addDrop function here,

1012
00:40:13,424 --> 00:40:17,659
that takes a drop, which is gonna be UIView, one of these

1013
00:40:17,661 --> 00:40:22,230
things that we're creating, and I'm going to add the drop

1014
00:40:23,666 --> 00:40:28,568
as items to both my gravity and my collider.

1015
00:40:30,806 --> 00:40:32,238
And in fact, and

1016
00:40:32,240 --> 00:40:35,174
this is debatable whether this is kind of the architecture

1017
00:40:35,176 --> 00:40:39,044
one would want, but I'm gonna actually manage the view

1018
00:40:39,046 --> 00:40:41,913
whether it's in the view hierarchy or not, here.

1019
00:40:41,915 --> 00:40:46,984
So I'm going to add this drop to my reference view

1020
00:40:46,986 --> 00:40:49,720
whenever you call addDrop in my behavior.

1021
00:40:49,722 --> 00:40:53,390
So I know the dynamic animator I'm in, all right,

1022
00:40:53,392 --> 00:40:55,258
because I'm a behavior.

1023
00:40:55,260 --> 00:40:58,061
I might be nil, but might not, and

1024
00:40:58,063 --> 00:41:01,731
I know the reference view for that dynamic animator.

1025
00:41:01,733 --> 00:41:04,099
That might be nil but probably not.

1026
00:41:04,101 --> 00:41:06,668
And so from there, I can add SubviewThisDrop.

1027
00:41:08,738 --> 00:41:12,239
So if you call addDrop on this drop behavior, it will add it

1028
00:41:12,241 --> 00:41:15,909
to the reference view and then add it to its behaviors.

1029
00:41:15,911 --> 00:41:17,644
And same thing, I could have a removeDrop.

1030
00:41:17,646 --> 00:41:23,116
All right, which takes a UI view and it does the opposite.

1031
00:41:23,118 --> 00:41:26,552
So, gravity.removeItem, the drop.

1032
00:41:26,554 --> 00:41:29,221
Collider.removeItem, the drop.

1033
00:41:29,223 --> 00:41:32,290
And drop.removeFromSuperView.

1034
00:41:32,292 --> 00:41:35,193
Okay?

1035
00:41:35,195 --> 00:41:38,062
So now I have this nice class right here,

1036
00:41:38,064 --> 00:41:39,296
which is a behavior, and

1037
00:41:39,298 --> 00:41:42,399
it replaces all those behavioral things over here.

1038
00:41:42,401 --> 00:41:45,369
So, instead of animating behavior and

1039
00:41:45,371 --> 00:41:49,639
gravity separately, I can just create a dropItBehavior

1040
00:41:49,641 --> 00:41:54,877
equals DropItBehavior, okay, so just create one of those.

1041
00:41:54,879 --> 00:41:58,146
And it could even probably even say let here, okay?

1042
00:41:58,148 --> 00:41:59,681
And then in addBehavior,

1043
00:41:59,683 --> 00:42:02,950
I can just say add the dropItBehavior.

1044
00:42:02,952 --> 00:42:03,851
Okay? So I don't need to

1045
00:42:03,853 --> 00:42:05,152
add the collider separately,

1046
00:42:05,154 --> 00:42:07,554
just do the drop behavior and same thing down here.

1047
00:42:07,556 --> 00:42:11,725
All three of these things, adding the subview,

1048
00:42:11,727 --> 00:42:17,396
those all are just replaced by saying dropitBehavior.addDrop,

1049
00:42:17,398 --> 00:42:19,031
and the drop view.

1050
00:42:19,033 --> 00:42:20,499
'Kay? So you can see my

1051
00:42:20,501 --> 00:42:23,768
code here has gotten much more focused on kind of,

1052
00:42:23,770 --> 00:42:25,169
what we're doing and

1053
00:42:25,171 --> 00:42:27,838
the behaviors have been moved off into the behavior code.

1054
00:42:27,840 --> 00:42:30,374
Now let's run this to make sure we didn't break anything

1055
00:42:30,376 --> 00:42:34,110
by doing that, and it looks like we're in good shape.

1056
00:42:34,112 --> 00:42:35,295
Okay?

1057
00:42:35,296 --> 00:42:36,479
But these things can still tilt.

1058
00:42:36,481 --> 00:42:40,216
They're still, you know, getting out of their little

1059
00:42:40,218 --> 00:42:42,451
columns, and they're also not bouncing very much.

1060
00:42:42,453 --> 00:42:44,319
So let's get back to fixing that.

1061
00:42:44,321 --> 00:42:46,254
And now, whenever I wanna add a new behavior,

1062
00:42:46,256 --> 00:42:48,489
I'm gonna add it in this behavior class.

1063
00:42:49,525 --> 00:42:51,325
So, what kind of behavior is that?

1064
00:42:51,327 --> 00:42:53,527
I'm gonna do lazy var again here.

1065
00:42:53,529 --> 00:42:56,429
I'm gonna call it my dropBehavior,

1066
00:42:56,431 --> 00:43:00,099
it's a UIDynamicItemBehavior.

1067
00:43:00,101 --> 00:43:01,667
Okay? I'm gonna do the same

1068
00:43:01,669 --> 00:43:05,604
magical trick, it's not that magical, and

1069
00:43:05,606 --> 00:43:10,809
I'm going to say let a lazilyCreatedDropBehavior.

1070
00:43:10,811 --> 00:43:12,310
I'm just using this name to

1071
00:43:12,312 --> 00:43:14,612
really make it clear to you what's happening here.

1072
00:43:14,614 --> 00:43:19,983
It's a UIDynamicItemBehavior and I'm doing this again cuz

1073
00:43:19,985 --> 00:43:22,585
I want to configure it just like I did for the collider.

1074
00:43:22,587 --> 00:43:25,154
And so let's do it so that things can't rotate.

1075
00:43:25,156 --> 00:43:28,524
So one of the things you can do is allowsRotation false.

1076
00:43:28,526 --> 00:43:29,875
'Kay?

1077
00:43:29,876 --> 00:43:31,225
Another thing you can do is the bounciness,

1078
00:43:31,228 --> 00:43:32,927
which is the elasticity.

1079
00:43:32,929 --> 00:43:35,663
So I'm gonna set the elasticity to about 0.75.

1080
00:43:35,665 --> 00:43:39,700
Elasticity of 1.0 is perfect elasticity.

1081
00:43:39,702 --> 00:43:41,902
So a thing bounces off something, it will have the

1082
00:43:41,904 --> 00:43:46,039
same amount of energy coming off as it had coming in, 'kay?

1083
00:43:46,041 --> 00:43:47,373
Perfect [INAUDIBLE], so 0.7,

1084
00:43:47,375 --> 00:43:49,241
these things will eventually settle down.

1085
00:43:50,544 --> 00:43:52,010
Okay? So there's that,

1086
00:43:52,012 --> 00:43:55,346
we will return our lazilyCreatedDropBehavior

1087
00:43:55,348 --> 00:43:55,913
here.

1088
00:43:55,915 --> 00:43:58,882
And so all we need to do to make that work, again,

1089
00:43:58,884 --> 00:44:00,717
is add it as a child behavior here.

1090
00:44:00,719 --> 00:44:06,089
Oops, drop behavior, and

1091
00:44:06,091 --> 00:44:10,526
also make sure that we add any drops to it aswell.

1092
00:44:10,528 --> 00:44:13,462
DropBehavior.addItem, the drop, and

1093
00:44:13,464 --> 00:44:15,130
same thing down here.

1094
00:44:16,066 --> 00:44:19,233
DropBehavior.removeItem, the drop.

1095
00:44:19,235 --> 00:44:21,135
Okay?

1096
00:44:21,136 --> 00:44:23,036
So we don't have to change anything in the other place.

1097
00:44:23,039 --> 00:44:25,372
Okay, back over here, we change nothing,

1098
00:44:25,374 --> 00:44:27,474
because we're only changing behaviors here.

1099
00:44:27,476 --> 00:44:30,276
So this code has delegated all its behavior off to

1100
00:44:30,278 --> 00:44:32,028
the dropIt behavior.

1101
00:44:32,029 --> 00:44:33,779
Question? >> [INAUDIBLE] How come like,

1102
00:44:33,781 --> 00:44:36,782
we can, I guess, use the lazy variables in our init if

1103
00:44:36,784 --> 00:44:40,686
they're not created until init is finished, you know?

1104
00:44:40,688 --> 00:44:44,022
>> Well, it's, so the question is how can I do this,

1105
00:44:44,024 --> 00:44:46,107
basically?

1106
00:44:46,108 --> 00:44:48,191
How am I allowed, during initialization, to, you know,

1107
00:44:48,194 --> 00:44:49,360
not have this set?

1108
00:44:49,362 --> 00:44:50,728
And well, and the answer is,

1109
00:44:50,730 --> 00:44:52,262
it's a feature of the language.

1110
00:44:52,264 --> 00:44:56,232
It will suspend the rule that says that all things must be

1111
00:44:56,234 --> 00:45:00,102
initialized as long as you've set it to something that

1112
00:45:00,104 --> 00:45:02,738
can be you know, determined later.

1113
00:45:02,740 --> 00:45:05,307
So lazy variables, if they're marked lazy,

1114
00:45:05,309 --> 00:45:07,976
they don't have to be initialized at init time.

1115
00:45:07,978 --> 00:45:09,477
That's what lazy means,

1116
00:45:09,479 --> 00:45:12,279
does not have to be initialized at init time.

1117
00:45:12,281 --> 00:45:13,914
But the first time someone accesses it,

1118
00:45:13,916 --> 00:45:16,116
it's going to be initialized, even if it wasn't a closure.

1119
00:45:16,118 --> 00:45:18,752
Even if we set it to be equal to something else,

1120
00:45:18,754 --> 00:45:22,621
that would happen at the time someone accesses it.

1121
00:45:22,623 --> 00:45:23,822
That's going to have to be,

1122
00:45:23,824 --> 00:45:26,558
by definition, after the full initialization.

1123
00:45:26,560 --> 00:45:29,060
Because no one can access any properties until full

1124
00:45:29,062 --> 00:45:29,727
initialization.

1125
00:45:29,729 --> 00:45:31,629
Make sense?

1126
00:45:31,631 --> 00:45:33,281
Okay?

1127
00:45:33,282 --> 00:45:34,932
If you have more questions I could cover it more, but

1128
00:45:34,934 --> 00:45:36,733
that's the basic deal on the lazies.

1129
00:45:36,735 --> 00:45:37,867
Yeah?

1130
00:45:37,869 --> 00:45:41,904
So previous to that there were some small gaps,

1131
00:45:41,906 --> 00:45:46,475
S and Q, sets the size of the general view to be equal to

1132
00:45:46,477 --> 00:45:51,413
the size of the whole content divided by like [INAUDIBLE].

1133
00:45:51,415 --> 00:45:53,314
>> There were no gaps along top.

1134
00:45:53,316 --> 00:45:54,749
It was only when they started falling and

1135
00:45:54,751 --> 00:45:57,217
tilting a little that they made gaps between each other.

1136
00:45:58,253 --> 00:45:59,552
Watch, okay?

1137
00:45:59,554 --> 00:46:02,521
So here, look how much springier now we are.

1138
00:46:02,523 --> 00:46:04,857
And also notice they can't tilt, so

1139
00:46:04,859 --> 00:46:06,358
they stay in their columns.

1140
00:46:06,360 --> 00:46:07,792
You're gonna see there's no gaps now.

1141
00:46:08,795 --> 00:46:11,295
Okay, it was only the tilting that was causing them to

1142
00:46:11,297 --> 00:46:12,963
have gaps.

1143
00:46:12,964 --> 00:46:14,630
So, you can send these things down,

1144
00:46:14,631 --> 00:46:16,297
there bouncing off each other and also off the bottom.

1145
00:46:17,502 --> 00:46:19,869
Okay? And they eventually

1146
00:46:19,871 --> 00:46:20,703
settle into stasis.

1147
00:46:22,406 --> 00:46:22,971
Okay?

1148
00:46:24,307 --> 00:46:25,807
Everybody got that?

1149
00:46:25,809 --> 00:46:27,525
All right? The next thing we're gonna do

1150
00:46:27,526 --> 00:46:29,242
in our fun game is, we're going to do a Tetris-like

1151
00:46:29,245 --> 00:46:34,047
thing, which is, when a row is fully clear, question?

1152
00:46:34,049 --> 00:46:36,266
Yeah? >> Why

1153
00:46:36,267 --> 00:46:38,484
are all the boxes completely aligned horizontally?

1154
00:46:38,487 --> 00:46:39,786
>> Why are they completely aligned horizontally?

1155
00:46:39,788 --> 00:46:40,887
>> Well, they're not.

1156
00:46:40,888 --> 00:46:41,987
Like, some of them are a little higher.

1157
00:46:41,989 --> 00:46:43,589
>> Oh, yeah, why are there slight differences?

1158
00:46:43,591 --> 00:46:48,193
Well, I'm not a 100% sure of why that is.

1159
00:46:48,195 --> 00:46:52,730
I think it's because, and don't quote me on this 100%,

1160
00:46:52,732 --> 00:46:54,932
but I think it's because when the thing is animating,

1161
00:46:54,934 --> 00:46:57,901
it's not animating on integer boundaries, okay?

1162
00:46:57,903 --> 00:47:00,970
And I think the things can slightly overlap by tiny

1163
00:47:00,972 --> 00:47:01,604
fractions.

1164
00:47:01,606 --> 00:47:03,840
But it's enough for

1165
00:47:03,841 --> 00:47:06,075
one or more to draw slightly one pixel or point off.

1166
00:47:06,077 --> 00:47:06,642
That make sense?

1167
00:47:07,778 --> 00:47:08,543
But that's a good question.

1168
00:47:08,545 --> 00:47:10,629
I've noticed that as well, and

1169
00:47:10,630 --> 00:47:12,714
it's like right in here, see those two guys right there?

1170
00:47:12,716 --> 00:47:13,614
Slightly different.

1171
00:47:14,617 --> 00:47:15,849
So yeah, good question there.

1172
00:47:17,085 --> 00:47:19,419
All right, back to where we were here.

1173
00:47:20,588 --> 00:47:23,188
So what I wanna do is remove a whole row when

1174
00:47:23,190 --> 00:47:27,125
a row is complete and when my animation settles down.

1175
00:47:27,127 --> 00:47:30,261
Okay, when my animation stops, pauses, and

1176
00:47:30,263 --> 00:47:33,164
a whole row is full, I want to remove it.

1177
00:47:33,166 --> 00:47:36,067
Okay? So how am I gonna do that?

1178
00:47:36,068 --> 00:47:38,969
Well, I have a nice function called removeCompletedRow

1179
00:47:38,971 --> 00:47:44,341
which I'm gonna type in really fast, again, here it is.

1180
00:47:44,343 --> 00:47:45,508
Don't worry about this,

1181
00:47:45,510 --> 00:47:47,109
you can look at this after lecture.

1182
00:47:47,111 --> 00:47:50,079
It's not doing anything except for looking for

1183
00:47:50,081 --> 00:47:53,615
rows that are full, and when it finds a row that's full,

1184
00:47:53,617 --> 00:47:56,084
it goes through and calls removeDraw.

1185
00:47:56,086 --> 00:47:58,586
Right, in my dropping behavior on all of the things

1186
00:47:58,588 --> 00:47:59,186
in the row.

1187
00:47:59,188 --> 00:47:59,820
That's all it does.

1188
00:47:59,822 --> 00:48:02,289
Okay?

1189
00:48:02,290 --> 00:48:04,757
All this is just finding the ones that are all in a row, or

1190
00:48:04,760 --> 00:48:07,293
that complete a row or mostly complete a row.

1191
00:48:07,295 --> 00:48:09,629
It allows a little bit of gaps in there.

1192
00:48:09,631 --> 00:48:10,629
And then this just removes it.

1193
00:48:10,631 --> 00:48:12,097
It only removes one row though.

1194
00:48:12,099 --> 00:48:13,799
It starts at the bottom,

1195
00:48:13,801 --> 00:48:15,867
starts going up til it finds a row and then it removes it.

1196
00:48:15,869 --> 00:48:16,501
So it only does one.

1197
00:48:17,603 --> 00:48:19,820
All right?

1198
00:48:19,821 --> 00:48:22,038
Now, how do we get this remover completed row called?

1199
00:48:22,041 --> 00:48:24,108
Okay, well,

1200
00:48:24,109 --> 00:48:26,176
I'm gonna call it when the animation settles down.

1201
00:48:26,178 --> 00:48:29,112
And I told you that I can find that out using my dynamic

1202
00:48:29,114 --> 00:48:30,580
animator's delegate.

1203
00:48:30,582 --> 00:48:34,216
So, here's my dynamic animator right here being created.

1204
00:48:34,218 --> 00:48:36,251
I'm actually just right here gonna say.

1205
00:48:36,253 --> 00:48:40,989
Make my dynamic animator's delegate, be myself.

1206
00:48:40,991 --> 00:48:42,623
Okay? And of course we know that's

1207
00:48:42,625 --> 00:48:43,991
going to cause an error.

1208
00:48:43,993 --> 00:48:45,526
Right here. And that error is,

1209
00:48:45,528 --> 00:48:48,428
you don't implement the UIDynamicAnimatorDelegate

1210
00:48:48,430 --> 00:48:49,095
protocol.

1211
00:48:49,097 --> 00:48:52,198
So okay, no problem.

1212
00:48:52,200 --> 00:48:53,499
UIDynamicAnimatorDelegate.

1213
00:48:53,501 --> 00:48:54,199
Okay?

1214
00:48:54,201 --> 00:48:55,767
Problem solved.

1215
00:48:55,769 --> 00:48:58,269
There's only two methods in that protocol.

1216
00:48:58,271 --> 00:48:59,137
They're both optional.

1217
00:48:59,139 --> 00:49:00,871
You don't have to implement them.

1218
00:49:00,873 --> 00:49:04,708
The one we want is dynamicAnimatorDidPause.

1219
00:49:04,710 --> 00:49:06,710
See, here's the two methods.

1220
00:49:06,712 --> 00:49:08,144
We want this one, DidPause.

1221
00:49:08,146 --> 00:49:09,679
So when it pauses, in other words,

1222
00:49:09,681 --> 00:49:13,482
it's reached stasis, for now anyway, it's gonna pause.

1223
00:49:13,484 --> 00:49:17,118
And when it pauses, I'm going to remove CompletedRow and

1224
00:49:17,120 --> 00:49:18,019
that's it.

1225
00:49:19,188 --> 00:49:20,487
Nothing else required.

1226
00:49:20,489 --> 00:49:21,555
So we'll see if that works.

1227
00:49:23,291 --> 00:49:24,991
Alright, so put a bunch of drops down here.

1228
00:49:24,993 --> 00:49:29,962
Now if it comes to stasis but there is no completed

1229
00:49:29,964 --> 00:49:32,631
row which there isn't because there's gaps in this row,

1230
00:49:32,633 --> 00:49:34,650
it does nothing.

1231
00:49:34,651 --> 00:49:36,668
But if I throw some more down here, enough that it completes

1232
00:49:36,670 --> 00:49:39,470
a row, which this is going to complete a row.

1233
00:49:39,472 --> 00:49:42,440
Okay. Once it settles and pauses,

1234
00:49:42,442 --> 00:49:46,576
then it will remove the drops and the other ones will fall.

1235
00:49:46,578 --> 00:49:47,544
Okay?

1236
00:49:47,545 --> 00:49:48,511
Now, the two things to notice here.

1237
00:49:48,513 --> 00:49:50,079
One, it waited till we paused.

1238
00:49:50,081 --> 00:49:51,013
That was cool.

1239
00:49:51,015 --> 00:49:52,781
Two, after it removed them,

1240
00:49:52,783 --> 00:49:54,950
everything else started animating again.

1241
00:49:54,952 --> 00:49:57,118
Because nothing was underneath them.

1242
00:49:57,120 --> 00:50:00,855
Gravity kept pulling them down and they fell.

1243
00:50:00,857 --> 00:50:02,189
Okay? I didn't do anything

1244
00:50:02,191 --> 00:50:03,490
to say keep going.

1245
00:50:03,492 --> 00:50:06,126
It's just as soon as the gravity could work on those

1246
00:50:06,128 --> 00:50:08,027
things, they started working.

1247
00:50:08,029 --> 00:50:09,295
Okay? It's important to notice

1248
00:50:09,297 --> 00:50:11,263
the animator, even if it's paused,

1249
00:50:11,265 --> 00:50:14,132
it's always waiting for a behavior to do something.

1250
00:50:14,134 --> 00:50:14,699
Okay?

1251
00:50:15,635 --> 00:50:16,934
So that's cool,

1252
00:50:16,935 --> 00:50:18,234
and this happens even if I have multiple rows, so

1253
00:50:18,237 --> 00:50:20,404
let's just make it so there's a whole bunch of rows.

1254
00:50:20,406 --> 00:50:21,471
That are complete and

1255
00:50:22,774 --> 00:50:27,043
you'll see that it will remove a row and

1256
00:50:27,045 --> 00:50:29,278
then it will pause again and it'll just remove another row.

1257
00:50:29,280 --> 00:50:34,516
Okay, and you know,

1258
00:50:34,518 --> 00:50:36,951
depending on how many things are stacked up and

1259
00:50:36,953 --> 00:50:38,953
how it does, you'll have different response to it.

1260
00:50:38,955 --> 00:50:40,254
Okay?

1261
00:50:40,256 --> 00:50:42,489
Now, let's go back and make it so

1262
00:50:42,491 --> 00:50:44,758
they can rotate and let's see what happens again.

1263
00:50:44,760 --> 00:50:46,426
So, how can we make it rotate?

1264
00:50:46,428 --> 00:50:47,827
Trivial.

1265
00:50:47,828 --> 00:50:49,227
We just go back to here and just turn this,

1266
00:50:49,230 --> 00:50:54,032
allows rotation, back to true, which is the default, okay?

1267
00:50:54,034 --> 00:50:54,733
And run again.

1268
00:50:56,036 --> 00:50:57,535
'Kay.

1269
00:50:57,537 --> 00:50:58,969
So let's put a bunch of them down here again.

1270
00:50:58,971 --> 00:51:01,038
Now they're gonna start banging into the edges of each

1271
00:51:01,040 --> 00:51:02,772
other, and they'll start rotating and

1272
00:51:02,774 --> 00:51:05,575
bouncing around all over the place, right?

1273
00:51:05,577 --> 00:51:07,910
But they're still filling up rows.

1274
00:51:07,912 --> 00:51:08,944
'Kay?

1275
00:51:08,946 --> 00:51:10,012
'Kay?

1276
00:51:10,014 --> 00:51:11,446
See? They're kinda bouncing around?

1277
00:51:16,586 --> 00:51:17,618
There we go.

1278
00:51:17,620 --> 00:51:18,652
Okay. Too big of

1279
00:51:18,653 --> 00:51:19,685
a gap on that last one.

1280
00:51:19,688 --> 00:51:21,955
And if I put more down here, I'll get again.

1281
00:51:21,957 --> 00:51:23,122
Okay?

1282
00:51:23,124 --> 00:51:24,474
Everybody cool with that?

1283
00:51:24,475 --> 00:51:25,825
Understand what's going on there with that pausing

1284
00:51:25,827 --> 00:51:27,426
business and the fact that the animator is

1285
00:51:27,428 --> 00:51:28,994
always trying to continue animating?

1286
00:51:28,996 --> 00:51:29,861
Okay.

1287
00:51:29,863 --> 00:51:32,530
All right.

1288
00:51:32,532 --> 00:51:34,665
The next thing, I think we have time for

1289
00:51:34,667 --> 00:51:37,567
both of these things, the next thing we're gonna do is

1290
00:51:40,205 --> 00:51:42,605
let's talk about this collider a little more right now.

1291
00:51:42,607 --> 00:51:45,341
The collider is only colliding with each other and

1292
00:51:45,343 --> 00:51:47,076
colliding with the walls.

1293
00:51:47,078 --> 00:51:49,444
What if I wanna put something right, like a big,

1294
00:51:49,446 --> 00:51:52,347
I'm gonna put a circle right in the center of my.

1295
00:51:52,349 --> 00:51:55,216
View and have the things hit that and bounce off.

1296
00:51:55,218 --> 00:51:57,752
So how do I create an arbitrary boundary, basically?

1297
00:51:57,754 --> 00:52:00,087
Well, the boundaries are created using bezier paths,

1298
00:52:00,089 --> 00:52:01,188
as I said.

1299
00:52:01,190 --> 00:52:03,723
And you can create a boundary,

1300
00:52:03,725 --> 00:52:06,125
it doesn't have to have any graphical representation.

1301
00:52:06,127 --> 00:52:07,526
So, in fact, I'm gonna start by doing that.

1302
00:52:07,528 --> 00:52:10,796
So I'm gonna go to my drop it behavior right here.

1303
00:52:10,798 --> 00:52:14,333
And I'm gonna make public a method, I'm gonna create

1304
00:52:14,335 --> 00:52:17,235
a public method to add a boundary, okay?

1305
00:52:17,237 --> 00:52:19,771
So I'm gonna call it addBarrier actually cause

1306
00:52:19,773 --> 00:52:21,772
it's gonna add a barrier somewhere,

1307
00:52:21,774 --> 00:52:25,709
a barrier to these things coming down or whatever.

1308
00:52:25,711 --> 00:52:29,746
I'm going to call this, these things need to be named.

1309
00:52:29,748 --> 00:52:31,547
Remember I told you about the.

1310
00:52:31,549 --> 00:52:33,816
Barrier, or the boundaries.

1311
00:52:33,818 --> 00:52:36,585
They have like an integer, or a string, or whatever.

1312
00:52:36,587 --> 00:52:38,987
So I'm going to use a string to name these things.

1313
00:52:38,989 --> 00:52:41,523
So I'm going to pass in a Bezier path,

1314
00:52:41,525 --> 00:52:43,791
and I'm going to name it.

1315
00:52:43,793 --> 00:52:45,926
So I'm going to have an argument called name.

1316
00:52:47,196 --> 00:52:48,429
Okay? And

1317
00:52:48,430 --> 00:52:49,663
I'm just going to call the colliders things and

1318
00:52:49,665 --> 00:52:54,300
you're going to remove any old boundary with that name.

1319
00:52:54,302 --> 00:52:57,570
And then I'm just gonna add a new boundary,'kay?

1320
00:52:57,572 --> 00:53:00,773
Look at that name and that path.

1321
00:53:00,775 --> 00:53:02,158
That's all I'm doing.

1322
00:53:02,159 --> 00:53:03,542
I'm just kind of making a nice simple method here

1323
00:53:03,544 --> 00:53:04,909
that removes the old one and adds the new one.

1324
00:53:04,911 --> 00:53:06,577
So, it only,

1325
00:53:06,579 --> 00:53:09,046
there's only gonna be one barrier with that name, and

1326
00:53:09,048 --> 00:53:11,982
I can move it any time by just saying add barrier,'kay?

1327
00:53:11,984 --> 00:53:13,950
So add barrier removes the old version of it.

1328
00:53:13,952 --> 00:53:14,884
So that's add barrier.

1329
00:53:14,886 --> 00:53:16,586
[COUGH] And so.

1330
00:53:16,588 --> 00:53:18,954
We can put that barrier in there.

1331
00:53:18,956 --> 00:53:20,255
Invisibly.

1332
00:53:20,257 --> 00:53:24,426
Let's put it maybe in our view did layout sub views.

1333
00:53:24,428 --> 00:53:26,160
So every time we change our bounds,

1334
00:53:26,162 --> 00:53:29,330
we'll move this barrier to the very center of that.

1335
00:53:29,332 --> 00:53:32,366
So I'm going to override view did layout sub views here.

1336
00:53:32,368 --> 00:53:36,836
Super ob views did labs sub views I want it right in

1337
00:53:36,838 --> 00:53:41,774
the center, so I'm gonna, well let's have the size of it be,

1338
00:53:41,776 --> 00:53:44,043
how about the same size as a drop?

1339
00:53:44,045 --> 00:53:45,111
Just to be simple.

1340
00:53:45,112 --> 00:53:46,178
Okay, I'm gonna have this barrier that I'm gonna put in

1341
00:53:46,180 --> 00:53:48,446
the middle be the same size as a drop.

1342
00:53:48,448 --> 00:53:53,150
I'm gonna have the origin of it be.

1343
00:53:53,152 --> 00:53:55,386
I keep this.

1344
00:53:55,388 --> 00:53:59,422
Let's put it in the middle, so that's a game view, bounds,

1345
00:53:59,424 --> 00:54:07,963
mid-x minus the barrier's size.

1346
00:54:07,965 --> 00:54:10,265
Barrier-size dot width divided by two, and

1347
00:54:10,267 --> 00:54:12,167
then the game view's.

1348
00:54:12,169 --> 00:54:13,335
Bounds mid-Y,

1349
00:54:13,337 --> 00:54:17,071
minus the barriers size dot heighth divided by two.

1350
00:54:17,073 --> 00:54:20,374
So I'm just putting it in the middle,'kay?

1351
00:54:22,011 --> 00:54:26,112
So let's let this UI Bezier path that we're gonna create

1352
00:54:26,114 --> 00:54:28,047
just be UI Bezier path.

1353
00:54:28,049 --> 00:54:31,316
We'll make it a circle using oval in rect,'kay, and

1354
00:54:31,318 --> 00:54:32,984
we'll make a CG rect.

1355
00:54:32,986 --> 00:54:36,354
Which is the barrier origin and the barrier size.

1356
00:54:40,226 --> 00:54:42,760
Okay so everybody understand I created a Besian path,

1357
00:54:42,762 --> 00:54:45,462
that's a circle right in the middle that's the same size as

1358
00:54:45,464 --> 00:54:46,863
a drop, okay?

1359
00:54:46,865 --> 00:54:50,600
And then I'm just going to tell my dropit behavior,

1360
00:54:50,602 --> 00:54:51,634
add this barrier.

1361
00:54:53,104 --> 00:54:54,069
And we'll call this barrier.

1362
00:54:54,071 --> 00:54:55,704
Let's be good coders again.

1363
00:54:55,706 --> 00:54:56,771
Let's say struct.

1364
00:54:56,773 --> 00:54:59,140
We'll call these path names.

1365
00:54:59,142 --> 00:55:01,175
Static.

1366
00:55:01,177 --> 00:55:07,781
We'll call this one middle barrier or something.

1367
00:55:09,517 --> 00:55:12,451
This is gonna be the string we use so here we'll go.

1368
00:55:12,453 --> 00:55:16,054
Path name dot middle barrier.

1369
00:55:16,056 --> 00:55:17,539
Okay?

1370
00:55:17,540 --> 00:55:19,023
So I can add this barrier right here and

1371
00:55:19,026 --> 00:55:20,909
that's all I need to do.

1372
00:55:20,910 --> 00:55:22,793
Once you add the barrier, the collider is already colliding

1373
00:55:22,796 --> 00:55:24,662
so it's going to make things collide with it.

1374
00:55:24,664 --> 00:55:26,296
So let's see what this looks like.

1375
00:55:26,298 --> 00:55:27,620
Okay?

1376
00:55:27,621 --> 00:55:28,943
see if we can tell.

1377
00:55:28,944 --> 00:55:30,266
Oh, do you see things bouncing away from the middle there?

1378
00:55:30,269 --> 00:55:31,167
See that?

1379
00:55:31,169 --> 00:55:32,669
[SOUND] Okay?

1380
00:55:32,671 --> 00:55:36,638
But it's a little bit bad because we can't see it.

1381
00:55:36,640 --> 00:55:38,073
I'd like to see this barrier.

1382
00:55:38,075 --> 00:55:39,541
But that's an independent thing.

1383
00:55:39,543 --> 00:55:41,676
Seeing it versus it being there is different.

1384
00:55:41,678 --> 00:55:44,445
So to see it I'm actually gonna make my background

1385
00:55:44,447 --> 00:55:46,063
view right here.

1386
00:55:46,064 --> 00:55:47,680
Instead of being a generic UI view I'm gonna make it

1387
00:55:47,683 --> 00:55:50,283
be a view that can draw Bezier paths.

1388
00:55:50,285 --> 00:55:51,852
Okay? Now,

1389
00:55:51,853 --> 00:55:53,420
this is surprisingly simple to do.

1390
00:55:53,422 --> 00:55:54,520
Okay?

1391
00:55:54,522 --> 00:55:56,889
I'm just going to create a UI view.

1392
00:55:56,891 --> 00:55:59,892
Subclass, UI view.

1393
00:55:59,894 --> 00:56:02,894
I'm going to call it BezierPathsView and it's

1394
00:56:02,896 --> 00:56:06,531
going to basically draw as many bezier paths as you want.

1395
00:56:06,533 --> 00:56:12,403
They'll also be named, just like the boundaries are named.

1396
00:56:12,405 --> 00:56:13,888
Okay? And

1397
00:56:13,889 --> 00:56:15,372
I'm going to do this by saying var bezierPaths,

1398
00:56:15,374 --> 00:56:17,941
these are my BÃ©zier paths I'm going to have.

1399
00:56:17,943 --> 00:56:22,645
It's just going to be a dictionary with strings as

1400
00:56:22,647 --> 00:56:27,616
the keys and UIBezierPaths as the argument, okay?

1401
00:56:27,618 --> 00:56:29,151
I'm going to, by the way,

1402
00:56:29,153 --> 00:56:32,487
I haven't been doing private in the demo for expediency.

1403
00:56:32,489 --> 00:56:34,288
But, again, private is important and here,

1404
00:56:34,290 --> 00:56:36,457
I am going to do the right privacy.

1405
00:56:36,459 --> 00:56:39,293
So now, I'm going to have a function called,

1406
00:56:39,295 --> 00:56:40,811
what did I call it?

1407
00:56:40,812 --> 00:56:42,328
Add path or something like that?

1408
00:56:42,331 --> 00:56:44,097
Yeah, setPath.

1409
00:56:44,099 --> 00:56:46,666
SetPath, and it's going to take a path,

1410
00:56:46,668 --> 00:56:48,367
which is a UI BÃ©zier path.

1411
00:56:48,369 --> 00:56:50,969
It's going to be optional because we're going to allow

1412
00:56:50,971 --> 00:56:52,537
you to clear out paths if you want,

1413
00:56:52,539 --> 00:56:54,773
and then it's also going to let them be named.

1414
00:56:56,009 --> 00:56:58,075
And I'm just going to put it in that dictionary,

1415
00:56:58,077 --> 00:57:00,377
just going to say BÃ©zier paths.

1416
00:57:00,379 --> 00:57:03,847
Path sub name equals the path.

1417
00:57:03,849 --> 00:57:07,183
And of course, I just changed my model basically, so

1418
00:57:07,185 --> 00:57:09,585
I'm going to just setNeedsDisplay.

1419
00:57:09,587 --> 00:57:13,322
Okay? Then, to draw this, for

1420
00:57:13,324 --> 00:57:20,962
underscore path in my bezierPaths, path.stroke.

1421
00:57:20,964 --> 00:57:23,181
Okay, that's it.

1422
00:57:23,182 --> 00:57:25,399
This is the entire implementation of this view.

1423
00:57:25,402 --> 00:57:26,134
Okay? It's just going to

1424
00:57:26,136 --> 00:57:27,201
stroke them in black.

1425
00:57:27,203 --> 00:57:28,769
We could add colors and all this stuff, but

1426
00:57:28,771 --> 00:57:30,437
we're just going to stroke them all in black.

1427
00:57:30,439 --> 00:57:32,038
This is a numeration of a dictionary,

1428
00:57:32,040 --> 00:57:33,690
hopefully you recognize that.

1429
00:57:33,691 --> 00:57:35,341
I don't care what the name is here while I'm doing this,

1430
00:57:35,343 --> 00:57:36,575
I only care the name because

1431
00:57:36,577 --> 00:57:38,677
I want to keep them unique is all.

1432
00:57:38,679 --> 00:57:41,130
Okay?

1433
00:57:41,131 --> 00:57:43,582
So now what I'm going to do is go back to my storyboard, and

1434
00:57:43,584 --> 00:57:45,583
instead of this being a generic view,

1435
00:57:45,585 --> 00:57:48,219
I'm going to go to the identity inspector, and

1436
00:57:48,221 --> 00:57:50,888
turn it into a BezierPathsView.

1437
00:57:50,890 --> 00:57:54,258
And also in my DropIt controller over here,

1438
00:57:54,260 --> 00:57:57,160
I'm going to change this outlet from being a generic

1439
00:57:57,162 --> 00:57:59,062
UIView from being a BezierPathsView.

1440
00:57:59,064 --> 00:58:02,231
So now the view that I'm doing all this animation is in

1441
00:58:02,233 --> 00:58:05,001
can draw arbitrary BÃ©zier paths, okay?

1442
00:58:05,003 --> 00:58:06,201
Very convenient because

1443
00:58:06,203 --> 00:58:08,070
I'm going to have it draw that circle.

1444
00:58:08,072 --> 00:58:10,638
Okay, that circle that we're having the collider do,

1445
00:58:10,640 --> 00:58:11,906
which is right here.

1446
00:58:11,907 --> 00:58:13,173
And I can do that with one line of code.

1447
00:58:13,176 --> 00:58:16,444
I'm just going to say gameView addPath,

1448
00:58:16,446 --> 00:58:21,314
or setPath, the same path, and I'll use even the same name,

1449
00:58:21,316 --> 00:58:24,351
PathNames.MiddleBarrier, okay.

1450
00:58:24,353 --> 00:58:27,220
The good thing now is every time viewDidLayoutSubview is

1451
00:58:27,222 --> 00:58:28,921
called, it'll replace, you know,

1452
00:58:28,923 --> 00:58:32,324
it'll move it to the middle and redraw it.

1453
00:58:32,326 --> 00:58:33,225
Okay? So let's now take

1454
00:58:33,227 --> 00:58:33,925
a look at this.

1455
00:58:33,927 --> 00:58:36,527
[COUGH] There it is.

1456
00:58:36,529 --> 00:58:37,328
Now, we can see it.

1457
00:58:37,330 --> 00:58:39,063
It's still a barrier,

1458
00:58:39,065 --> 00:58:42,732
like it was before, so something hit it, come on.

1459
00:58:42,734 --> 00:58:44,300
There we go, boom, okay?

1460
00:58:44,302 --> 00:58:46,102
And, you know, it's a complete barrier.

1461
00:58:46,104 --> 00:58:50,138
And it actually is along that BÃ©zier path.

1462
00:58:50,140 --> 00:58:52,140
It's not, you know, the square containing it.

1463
00:58:52,142 --> 00:58:53,742
It is actually on it.

1464
00:58:53,743 --> 00:58:55,343
So if I fill up this thing all the way to where it starts

1465
00:58:55,345 --> 00:58:56,628
getting to that,

1466
00:58:56,629 --> 00:58:57,912
you'll start seeing them tip right up against.

1467
00:58:57,914 --> 00:59:01,448
Do you see how they pile right up against it, there?

1468
00:59:01,450 --> 00:59:02,015
Okay?

1469
00:59:03,118 --> 00:59:05,017
So you can have an arbitrary BÃ©zier path there.

1470
00:59:06,487 --> 00:59:07,486
Okay? And if I rotate.

1471
00:59:08,522 --> 00:59:10,321
Okay, it'll put it in the middle.

1472
00:59:10,323 --> 00:59:11,822
Okay, it zoomed it out a little bit but

1473
00:59:11,824 --> 00:59:14,792
some of the things fell off the edge when I rotated that.

1474
00:59:14,794 --> 00:59:16,727
Got to be careful of that in your game too.

1475
00:59:16,729 --> 00:59:19,329
When you rotate,

1476
00:59:19,330 --> 00:59:21,930
if your bouncing ball is not in the middle area then,

1477
00:59:21,933 --> 00:59:24,033
it's going to be outside the boundary and so

1478
00:59:24,035 --> 00:59:27,502
it's going to fly off into outer space forever, okay?

1479
00:59:28,872 --> 00:59:30,838
Okay, so that's how we do barriers.

1480
00:59:30,840 --> 00:59:32,273
And you're going to have your bricks are going to

1481
00:59:32,275 --> 00:59:34,659
be probably not round,

1482
00:59:34,660 --> 00:59:37,044
well they could be round if you want, and you can put as

1483
00:59:37,046 --> 00:59:40,213
many of these little barriers as you want up here, okay?

1484
00:59:40,215 --> 00:59:42,248
And when you hit one of these, that delegate method,

1485
00:59:42,250 --> 00:59:43,816
you're going to set yourselves a collision delegate.

1486
00:59:43,818 --> 00:59:46,285
I don't really have time to do that, but,

1487
00:59:46,287 --> 00:59:50,889
you know, you could make it do something, flash or

1488
00:59:50,891 --> 00:59:53,258
animate, whatever is required by the required tasks.

1489
00:59:54,461 --> 00:59:56,927
Okay, the last kind of behavior I'm going to show you

1490
00:59:56,929 --> 00:59:58,262
is an attachment behavior.

1491
00:59:58,264 --> 01:00:01,098
So, the way I'm going to do this attachment,

1492
01:00:01,100 --> 01:00:03,366
let me show you here, is when a drop comes down,

1493
01:00:03,368 --> 01:00:06,002
I'm going to be able to grab onto it with

1494
01:00:06,004 --> 01:00:09,338
a piece of string, or more like a metal rod.

1495
01:00:09,340 --> 01:00:11,974
Grab onto it and I can move it around, okay?

1496
01:00:11,976 --> 01:00:14,976
Swing it around in a circle and let it fly if I want.

1497
01:00:16,079 --> 01:00:17,395
So, that's what I'm going to do.

1498
01:00:17,396 --> 01:00:18,712
I'm going to do that with an attachment behavior.

1499
01:00:18,715 --> 01:00:21,382
I'm just going to create an attachment from where I start

1500
01:00:21,384 --> 01:00:25,252
my pan to the middle of the drop, the currently

1501
01:00:25,254 --> 01:00:28,988
dropping drop, or the last dropped drop, basically.

1502
01:00:28,990 --> 01:00:30,723
And then as I pan around,

1503
01:00:30,725 --> 01:00:33,258
I'm just going to move the anchor point.

1504
01:00:33,260 --> 01:00:36,194
And because animation is all happy instantaneously, it's

1505
01:00:36,196 --> 01:00:39,197
just going to all magically animate to adapt to the fact

1506
01:00:39,199 --> 01:00:42,833
that I'm moving the anchor point of this attachment.

1507
01:00:42,835 --> 01:00:44,085
Okay?

1508
01:00:44,086 --> 01:00:45,336
And all the other behaviors are still going to work on it,

1509
01:00:45,338 --> 01:00:47,337
the gravity, the collisions,

1510
01:00:47,339 --> 01:00:48,571
all still going to work on that thing.

1511
01:00:48,573 --> 01:00:50,306
The attachment's just going to be another behavior.

1512
01:00:50,308 --> 01:00:52,608
Now I'm going to put this attachment in the controller

1513
01:00:52,610 --> 01:00:54,443
right here instead of in the behavior, just so

1514
01:00:54,445 --> 01:00:57,813
you can see it all happening a little better.

1515
01:00:57,815 --> 01:01:00,715
So let's do this kind of in multiple steps here.

1516
01:01:00,717 --> 01:01:03,818
Let's go ahead and do the gesture first.

1517
01:01:03,820 --> 01:01:07,088
Okay, so to do the behavior, I need an attachment behavior,

1518
01:01:07,090 --> 01:01:09,590
so I'm going to create an attachment behavior here,

1519
01:01:09,592 --> 01:01:11,758
UI attachment behavior.

1520
01:01:11,760 --> 01:01:14,527
Now, this one's going to be an optional because I only have

1521
01:01:14,529 --> 01:01:16,829
this attachment when I'm panning.

1522
01:01:16,831 --> 01:01:18,397
Okay? I don't have this attach,

1523
01:01:18,399 --> 01:01:21,133
it's nil basically, if I'm not currently attached to

1524
01:01:21,135 --> 01:01:25,837
something and panning around, whereas the dropping behavior

1525
01:01:25,839 --> 01:01:27,605
is happening all the time.

1526
01:01:27,607 --> 01:01:29,057
Okay?

1527
01:01:29,058 --> 01:01:30,508
Again, I could put this attachment behavior

1528
01:01:30,510 --> 01:01:31,475
in the dropping behavior.

1529
01:01:31,477 --> 01:01:32,993
I could do that.

1530
01:01:32,994 --> 01:01:34,510
I'm not going to, for kind of seeing it on screen,

1531
01:01:34,513 --> 01:01:38,148
the code on screen issue, but I could put it over there.

1532
01:01:38,150 --> 01:01:39,015
So I'm going to put it here.

1533
01:01:39,017 --> 01:01:40,550
So I have this attachment.

1534
01:01:40,551 --> 01:01:42,084
We're going to have to do some things with this attachment in

1535
01:01:42,086 --> 01:01:44,420
a second, but let's just say we have this attachment.

1536
01:01:44,422 --> 01:01:47,122
Let's go add that pan gesture.

1537
01:01:47,124 --> 01:01:50,792
Okay, so we'll go over here, we'll go to our storyboard.

1538
01:01:50,794 --> 01:01:53,027
Here's our storyboard right here.

1539
01:01:53,029 --> 01:01:55,096
Let's go down and find pan.

1540
01:01:55,098 --> 01:01:56,063
Where is it?

1541
01:01:56,065 --> 01:01:58,365
Pan? Right here.

1542
01:01:58,367 --> 01:01:59,966
So let's add pan to this thing.

1543
01:01:59,968 --> 01:02:01,734
Here's pan in the document outline.

1544
01:02:02,737 --> 01:02:05,204
Let's go ahead and

1545
01:02:05,205 --> 01:02:07,672
put the pan gesture down here by the drop gesture, I guess.

1546
01:02:07,675 --> 01:02:09,741
Okay, put her right there, okay,

1547
01:02:09,743 --> 01:02:13,645
it's an action, we'll call it grabDrop.

1548
01:02:13,647 --> 01:02:14,779
Okay, because that's what it's going to do,

1549
01:02:14,781 --> 01:02:17,781
it's going to grab onto a drop okay, here it is.

1550
01:02:19,118 --> 01:02:22,385
All right that's all we need to do in our UI here.

1551
01:02:22,387 --> 01:02:26,722
Let's go back to our drop the controller.

1552
01:02:26,724 --> 01:02:29,591
All right, so how are we going to implement this grab drop?

1553
01:02:29,593 --> 01:02:30,892
All right, we have that attachment,

1554
01:02:30,894 --> 01:02:33,795
basically all we need to do is, when we first start

1555
01:02:33,797 --> 01:02:36,464
our gesture, we need to create that attachment.

1556
01:02:36,466 --> 01:02:37,765
Then as it moves,

1557
01:02:37,766 --> 01:02:39,065
we're just going to move that anchor point.

1558
01:02:39,068 --> 01:02:40,100
And when it ends,

1559
01:02:40,102 --> 01:02:42,602
we're going to set the attachment back to nil.

1560
01:02:42,604 --> 01:02:45,505
So, this is incredibly easy to do.

1561
01:02:45,507 --> 01:02:46,906
You're finding all this, I hope,

1562
01:02:46,908 --> 01:02:48,274
to be pretty straightforward to do.

1563
01:02:48,276 --> 01:02:50,442
It's a pretty amazing and powerful system.

1564
01:02:50,444 --> 01:02:51,977
But in this hand gesture, first,

1565
01:02:51,979 --> 01:02:53,712
I'm going to get the point.

1566
01:02:53,714 --> 01:02:55,913
Okay? The gesture point,

1567
01:02:55,915 --> 01:02:59,116
that is just the sender's location in our gainView.

1568
01:03:02,555 --> 01:03:05,722
All right, so now I know where that pan is.

1569
01:03:05,724 --> 01:03:09,225
And I'm just going to switch on what state we're in with

1570
01:03:09,227 --> 01:03:11,227
this gesture.

1571
01:03:11,228 --> 01:03:13,228
And if we're in began, so if the thing just began,

1572
01:03:13,231 --> 01:03:14,763
then I'm just going to create the attachment.

1573
01:03:14,765 --> 01:03:18,500
So I'm going to say attachment equals UIAttachmentBehavior.

1574
01:03:18,502 --> 01:03:20,669
Now, here's all the ways you can attach things.

1575
01:03:20,671 --> 01:03:22,804
You can attach between two items, between an item and

1576
01:03:22,806 --> 01:03:23,771
an anchor.

1577
01:03:23,773 --> 01:03:26,106
You can even attach between two items or

1578
01:03:26,108 --> 01:03:29,543
an anchor with offset from the center, which is kind of a fun

1579
01:03:29,545 --> 01:03:32,679
one because if it can rotate, then as it spins around,

1580
01:03:32,681 --> 01:03:35,181
it will be spinning around because the attachment's not

1581
01:03:35,183 --> 01:03:36,382
dead in the center, right?

1582
01:03:36,384 --> 01:03:38,617
It's right off onto the side.

1583
01:03:38,619 --> 01:03:39,851
It's not in the middle of the square.

1584
01:03:39,853 --> 01:03:41,820
It might be in the corner and so it kind of rotates.

1585
01:03:41,822 --> 01:03:43,238
So that's kind of fun.

1586
01:03:43,239 --> 01:03:44,655
But, we're just going to do to the center here.

1587
01:03:44,657 --> 01:03:47,591
And so, we need to attach the item.

1588
01:03:47,593 --> 01:03:49,860
So we want this one right here to the anchor.

1589
01:03:49,862 --> 01:03:51,061
This is the one we want.

1590
01:03:51,063 --> 01:03:53,363
So the item, what item are we attaching to?

1591
01:03:53,365 --> 01:03:55,498
Well, we're attaching to the last.

1592
01:03:55,500 --> 01:03:57,033
DroppedView.

1593
01:03:57,035 --> 01:03:59,535
So I'm gonna have to create a LastDroppedView,

1594
01:03:59,537 --> 01:04:01,603
which will have to go implement.

1595
01:04:01,605 --> 01:04:03,572
And what anchor?

1596
01:04:03,573 --> 01:04:05,540
Well, I'm gonna anchor it to the gesturePoint, 'kay?

1597
01:04:05,542 --> 01:04:07,141
Wherever that pan gesture is.

1598
01:04:07,143 --> 01:04:08,709
So let's do this lastDroppedView.

1599
01:04:08,711 --> 01:04:10,544
That's easy.

1600
01:04:10,545 --> 01:04:12,378
We'll just say var lastDroppedView.

1601
01:04:12,381 --> 01:04:15,415
It's a UIView that can be nil if we're not currently

1602
01:04:15,417 --> 01:04:17,184
dropping.

1603
01:04:17,185 --> 01:04:18,952
And then down here in drop or we drop something,

1604
01:04:18,954 --> 01:04:21,721
I'm just gonna say that the lastDroppedView equals to

1605
01:04:21,723 --> 01:04:23,389
the dropView.

1606
01:04:23,390 --> 01:04:25,056
'Kay, so I'm just keeping track of the lastDroppedView.

1607
01:04:26,193 --> 01:04:28,460
'Kay, that make sense?

1608
01:04:28,462 --> 01:04:31,463
An exclamation point, yeah.

1609
01:04:31,465 --> 01:04:32,730
No, we don't want that.

1610
01:04:32,732 --> 01:04:36,734
We want to say.

1611
01:04:36,736 --> 01:04:39,103
And actually, I guess we'll always have last drop view.

1612
01:04:39,105 --> 01:04:42,572
This is the kind of one where it's like, if let there, or

1613
01:04:42,574 --> 01:04:44,074
do I just wanna do it.

1614
01:04:44,076 --> 01:04:45,241
Actually, I'm just gonna if let.

1615
01:04:45,243 --> 01:04:46,709
I just wanna be careful here in case for

1616
01:04:46,711 --> 01:04:48,043
some reason the last drop view isn't around.

1617
01:04:48,045 --> 01:04:52,814
So I'm gonna say if we can let the viewToAttachTo equal

1618
01:04:52,816 --> 01:04:54,849
the lastDroppedView,

1619
01:04:54,851 --> 01:04:57,251
then we will start this attachment business.

1620
01:04:59,521 --> 01:05:02,655
'Kay, it'll be safe there, because we might change

1621
01:05:02,657 --> 01:05:04,724
something in the future where we don't always set the last

1622
01:05:04,726 --> 01:05:07,093
drop view to something, so I wanna be careful there.

1623
01:05:07,095 --> 01:05:09,094
[COUGH] So, we have the attachment.

1624
01:05:09,096 --> 01:05:11,630
By the way, I'm also gonna put a feature of my game that once

1625
01:05:11,632 --> 01:05:14,165
you grab onto something, you can't grab onto it again.

1626
01:05:14,167 --> 01:05:16,267
Like, if you grab onto it and let it go.

1627
01:05:16,269 --> 01:05:18,002
I'm not gonna let you grab onto it again because I might

1628
01:05:18,004 --> 01:05:20,571
wanna eventually turn this into a game where you have to

1629
01:05:20,573 --> 01:05:23,206
like, line the things up into perfect stacks or

1630
01:05:23,208 --> 01:05:25,342
something like that, and

1631
01:05:25,343 --> 01:05:27,477
so I can put something in here like this to make my

1632
01:05:27,479 --> 01:05:29,312
game a little more challenging where I can't constantly be

1633
01:05:29,314 --> 01:05:33,048
just regrabbing it until I get exactly where I want, okay.

1634
01:05:33,050 --> 01:05:34,917
So that's it.

1635
01:05:34,918 --> 01:05:36,785
All I have to do in began is create that attachment and

1636
01:05:36,787 --> 01:05:37,986
then if things change.

1637
01:05:37,988 --> 01:05:42,123
[SOUND] All I have to do is change that anchor point.

1638
01:05:42,125 --> 01:05:43,957
That's the attachment's anchorPoint, and

1639
01:05:43,959 --> 01:05:46,093
if the attachment is nil, this will just do nothing.

1640
01:05:46,095 --> 01:05:47,160
That's fine.

1641
01:05:47,162 --> 01:05:48,594
So that's the gesturePoint.

1642
01:05:48,596 --> 01:05:52,031
And when it's all over, 'kay, the span is just gonna say

1643
01:05:52,033 --> 01:05:54,667
attachment equals nil, [COUGH] okay?

1644
01:05:54,669 --> 01:05:57,069
All done.

1645
01:05:57,070 --> 01:05:59,470
So, and of course, we have the default case,

1646
01:05:59,473 --> 01:06:04,475
all the things like the Pan failed or

1647
01:06:04,477 --> 01:06:06,444
whatever, I'm just gonna do nothing in that case.

1648
01:06:06,446 --> 01:06:08,179
That's probably not,

1649
01:06:08,180 --> 01:06:09,913
actually, I probably should be doing something here if,

1650
01:06:09,915 --> 01:06:11,415
like if I was in the middle of this and

1651
01:06:11,417 --> 01:06:13,650
a phone call came in and my Pan failed,

1652
01:06:13,652 --> 01:06:17,120
I probably should be doing attachment equals nil.

1653
01:06:17,122 --> 01:06:19,422
'Kay, so probably attachment equals nil should be

1654
01:06:19,424 --> 01:06:21,924
the default case, but I haven't really analyzed that.

1655
01:06:21,926 --> 01:06:24,059
I haven't done that full design, but

1656
01:06:24,061 --> 01:06:27,495
that's something you obviously wanna think about if you're

1657
01:06:27,497 --> 01:06:28,763
building something.

1658
01:06:28,765 --> 01:06:32,199
Okay, [COUGH] now this attachment we're creating it,

1659
01:06:32,201 --> 01:06:35,235
but notice we never added to the dynamic animator.

1660
01:06:35,237 --> 01:06:37,771
So this attachment is not ever actually going to be animated.

1661
01:06:37,773 --> 01:06:41,307
So where we're gonna do that, I'm actually gonna do that in

1662
01:06:41,309 --> 01:06:46,212
the will set and did set of the attachment.

1663
01:06:47,181 --> 01:06:49,781
So in the will set, 'kay, that's this

1664
01:06:49,783 --> 01:06:52,350
attachment is about to be set to something new, I'm gonna

1665
01:06:52,352 --> 01:06:58,389
tell my animator to remove the existing attachment.

1666
01:06:58,391 --> 01:07:00,958
So if there's an attachment behavior that's existing right

1667
01:07:00,960 --> 01:07:05,395
now, remove it, and similarly, as long as [COUGH] I

1668
01:07:05,397 --> 01:07:09,432
am setting this to non-nil, if attachment is at nil, okay, so

1669
01:07:09,434 --> 01:07:11,567
if the attachment is not nil, then,

1670
01:07:11,569 --> 01:07:14,002
my animator can have the behavior of the attachment.

1671
01:07:14,004 --> 01:07:16,471
Okay, this is getting pretty bad, okay.

1672
01:07:16,473 --> 01:07:17,105
Got it?

1673
01:07:17,107 --> 01:07:17,972
Sorry about that.

1674
01:07:17,974 --> 01:07:19,073
So, get that?

1675
01:07:19,075 --> 01:07:21,275
What I'm doing there?

1676
01:07:21,276 --> 01:07:23,476
I'm basically adding and removing from the animator as

1677
01:07:23,479 --> 01:07:25,879
the attachment is set, or not set.

1678
01:07:25,881 --> 01:07:28,948
Now, we can go ahead and run this now, and I'm going to,

1679
01:07:28,950 --> 01:07:31,183
we're not gonna be able to see it though,

1680
01:07:31,185 --> 01:07:34,386
because we're not setting any Bezier path in our view, but

1681
01:07:34,388 --> 01:07:37,422
let's go ahead and look at it, see what it looks like.

1682
01:07:38,625 --> 01:07:39,690
Okay, so here's a drop.

1683
01:07:39,692 --> 01:07:40,991
I grabbed it.

1684
01:07:40,993 --> 01:07:43,527
Okay, so if you can kind of imagine,

1685
01:07:43,529 --> 01:07:46,363
I can even like, balance it on it's little stick.

1686
01:07:46,365 --> 01:07:47,397
>> [LAUGH].

1687
01:07:47,399 --> 01:07:49,416
>> So you can see I'm at there.

1688
01:07:49,417 --> 01:07:51,434
And if I let it go, or I can just bounce it off this thing.

1689
01:07:51,436 --> 01:07:52,267
'Kay, it's still attached.

1690
01:07:53,237 --> 01:07:53,835
All right, see that.

1691
01:07:55,005 --> 01:07:57,505
And I can let it go, and it'll bounce, 'kay?

1692
01:07:57,507 --> 01:07:59,206
I can grab the next one.

1693
01:07:59,208 --> 01:08:01,608
Now, it would be nicer if we could see this

1694
01:08:01,610 --> 01:08:05,078
little attachment wire that's on here, right?

1695
01:08:05,080 --> 01:08:08,281
And we can, because we have this nice view that makes it

1696
01:08:08,283 --> 01:08:09,148
easier to show a path.

1697
01:08:09,150 --> 01:08:10,733
So really,

1698
01:08:10,734 --> 01:08:12,317
what we need to do is we just need to say let path equal

1699
01:08:12,319 --> 01:08:17,655
UIBezierPath, and then we just need to say gameView,

1700
01:08:17,657 --> 01:08:20,958
addPath, this path, which we're gonna have to create,

1701
01:08:20,960 --> 01:08:23,127
and then again, we need a name for it, so

1702
01:08:23,129 --> 01:08:26,764
we'll call this the attachment path name.

1703
01:08:26,766 --> 01:08:33,203
Attachment, like that, 'kay, so a pathNames.Attachment.

1704
01:08:33,205 --> 01:08:35,705
'Kay, so really all we need to do is create

1705
01:08:35,707 --> 01:08:37,807
that path in here.

1706
01:08:37,809 --> 01:08:41,977
'Kay, the path between the attachment point and

1707
01:08:41,979 --> 01:08:43,178
the set path.

1708
01:08:43,180 --> 01:08:46,214
[SOUND] Okay, we just need to create this path,

1709
01:08:46,216 --> 01:08:49,183
that goes from the attachment anchor point,

1710
01:08:49,185 --> 01:08:50,918
to the middle of the view.

1711
01:08:50,920 --> 01:08:53,420
Well, okay, we need to find that view.

1712
01:08:53,422 --> 01:08:54,888
So, how do we get the view?

1713
01:08:54,890 --> 01:08:57,457
All behaviors, most of them anyway

1714
01:08:57,459 --> 01:09:01,227
can tell you the items that they're currently animating.

1715
01:09:01,229 --> 01:09:03,762
All right, they're affecting the behavior of and

1716
01:09:03,764 --> 01:09:06,031
attached behaviors can do that.

1717
01:09:06,033 --> 01:09:11,669
[SOUND] So, I'm gonna say if the attachedView equals and

1718
01:09:11,671 --> 01:09:13,838
how am I gonna get it?

1719
01:09:13,840 --> 01:09:19,409
I'm gonna get it by asking the attachments for its items.

1720
01:09:19,411 --> 01:09:22,412
That's all the things that it is attaching, could be two

1721
01:09:22,414 --> 01:09:24,981
items, could be one item, in our case gonna be one.

1722
01:09:24,983 --> 01:09:27,216
Since it's one I'm just gonna get the first one.

1723
01:09:27,218 --> 01:09:31,186
First is a array method, 'kay?

1724
01:09:31,188 --> 01:09:34,189
And I'm gonna make sure that it's UIView,

1725
01:09:34,191 --> 01:09:37,091
it's going to be UIView, but, I'm gonna

1726
01:09:37,093 --> 01:09:41,228
make sure it's a UIView so I'm gonna do if let here, 'kay?

1727
01:09:41,230 --> 01:09:44,898
So now I know that I've got the attached view that's going

1728
01:09:44,900 --> 01:09:48,702
on, it's in here.

1729
01:09:48,704 --> 01:09:51,104
So now I can make a connection between these two things.

1730
01:09:51,106 --> 01:09:53,906
I can just say path.moveToPoint,

1731
01:09:53,908 --> 01:09:58,777
I'll move to the anchor point, so that's the attachment's

1732
01:09:58,779 --> 01:10:03,548
anchorPoint, and then I'm going to path.addLineTo, and

1733
01:10:03,550 --> 01:10:08,318
I'm just going to add a line to the attachedView's center.

1734
01:10:08,320 --> 01:10:11,388
'Kay, so we got that.

1735
01:10:12,891 --> 01:10:14,824
The only thing about this is,

1736
01:10:14,826 --> 01:10:17,893
this is only going to work once.

1737
01:10:17,895 --> 01:10:20,529
When did set happens of the attachment.

1738
01:10:20,531 --> 01:10:22,997
When I first create that thing it's gonna draw that line,

1739
01:10:22,999 --> 01:10:25,366
that's great but what if line of that moving it around?

1740
01:10:25,368 --> 01:10:27,702
'Kay, when I move it around the anchor point moves so

1741
01:10:27,704 --> 01:10:29,770
this is gonna be no good anymore.

1742
01:10:29,772 --> 01:10:34,174
So, I actually have to put this code inside of

1743
01:10:34,176 --> 01:10:38,377
the attachment's action, 'kay?

1744
01:10:38,379 --> 01:10:42,348
So the action is just closure, once we put it inside

1745
01:10:42,350 --> 01:10:46,451
a closure we're gonna have to do self dots in here.

1746
01:10:46,453 --> 01:10:49,287
So we can be obvious that we are capturing self

1747
01:10:49,289 --> 01:10:50,654
when we do this.

1748
01:10:50,656 --> 01:10:53,624
Here's another self dot that we need, and here's another

1749
01:10:53,626 --> 01:10:58,795
self dot and this we'll say question mark, okay?

1750
01:10:59,798 --> 01:11:00,963
So here we have this action, so

1751
01:11:00,965 --> 01:11:04,066
this is good, but, and this will work.

1752
01:11:04,068 --> 01:11:06,334
Let's go ahead and run this.

1753
01:11:09,139 --> 01:11:12,173
'Kay, so grabby dots so you can see it works, right.

1754
01:11:12,175 --> 01:11:16,109
It's showing the connection there, but

1755
01:11:16,111 --> 01:11:17,310
it doesn't clean up.

1756
01:11:17,312 --> 01:11:19,212
That's no good, 'kay?

1757
01:11:19,214 --> 01:11:21,213
And so what's going on here?

1758
01:11:21,215 --> 01:11:22,281
'Kay, let's fix two problems.

1759
01:11:22,283 --> 01:11:23,782
One, this cleanup, is no good.

1760
01:11:23,784 --> 01:11:26,584
That's just because in will set right here,

1761
01:11:26,586 --> 01:11:31,756
we need to tell our gameView to

1762
01:11:31,758 --> 01:11:37,027
set that path to nil, for that name, the path name.

1763
01:11:37,029 --> 01:11:39,646
Attachment, right?

1764
01:11:39,647 --> 01:11:42,264
Every time we set a new one, we need to delete the old one.

1765
01:11:42,267 --> 01:11:45,034
The other thing is we got the memory cycle problem here.

1766
01:11:45,036 --> 01:11:46,635
[SOUND] Right?

1767
01:11:46,637 --> 01:11:49,171
Because this attachment, which self points to, so

1768
01:11:49,173 --> 01:11:50,672
self points to attachment.

1769
01:11:50,674 --> 01:11:51,873
Attachment has the action.

1770
01:11:51,875 --> 01:11:54,342
The action points back to self, 'kay?

1771
01:11:54,344 --> 01:11:56,877
'Kay, here's to using it here the attachment itself.

1772
01:11:56,879 --> 01:11:58,145
But it's pointing back to self, so

1773
01:11:58,147 --> 01:11:59,546
we got a memory cycle here.

1774
01:11:59,548 --> 01:12:03,249
So we have to say, that inside here, self,

1775
01:12:03,251 --> 01:12:09,055
should be unowned, in this closure, 'kay?

1776
01:12:09,057 --> 01:12:11,557
And that means that the system will not

1777
01:12:11,559 --> 01:12:14,626
keep self in memory in order to make this closure work.

1778
01:12:14,628 --> 01:12:16,728
It will assume the self is always gonna be there,

1779
01:12:16,730 --> 01:12:19,263
which it is always gonna be, because if there's no self,

1780
01:12:19,265 --> 01:12:20,398
there's no attachment.

1781
01:12:20,400 --> 01:12:22,800
If there's no attachment, there's no action, so

1782
01:12:22,802 --> 01:12:25,302
then there's no closure, 'kay?

1783
01:12:25,304 --> 01:12:26,536
So we broke that memory cycle here.

1784
01:12:26,538 --> 01:12:29,939
All right, so that fixes both of these problems.

1785
01:12:29,941 --> 01:12:32,375
So here we go,

1786
01:12:32,376 --> 01:12:34,810
drop one, swing it around, well, bang it on here.

1787
01:12:34,812 --> 01:12:35,644
Woops.

1788
01:12:35,646 --> 01:12:36,411
Like that.

1789
01:12:36,413 --> 01:12:37,712
Let go.

1790
01:12:37,714 --> 01:12:40,448
'Kay, put a whole bunch of these down here.

1791
01:12:40,450 --> 01:12:43,283
'Kay, now notice that it, let's say I have enough of

1792
01:12:43,285 --> 01:12:45,485
these things to make a row disappear, but

1793
01:12:45,487 --> 01:12:48,588
if I drag onto this and I'm animating, see, the row won't

1794
01:12:48,590 --> 01:12:52,024
disappear because we're never coming to stasis here, 'kay?

1795
01:12:52,993 --> 01:12:54,559
But if I let it come to stasis,

1796
01:12:54,561 --> 01:12:56,428
then we don't have a complete row.

1797
01:12:56,430 --> 01:12:58,563
Okay, let's get it clear row.

1798
01:12:58,565 --> 01:13:01,098
[SOUND] There we go.

1799
01:13:01,100 --> 01:13:03,000
We got one, 'kay?

1800
01:13:03,002 --> 01:13:04,368
So now we got a complete row there,

1801
01:13:04,370 --> 01:13:06,403
the third one up from the bottom.

1802
01:13:06,405 --> 01:13:10,539
And as long we do this, it's not gonna come to stasis,

1803
01:13:10,541 --> 01:13:13,175
not gonna pause, not gonna do it,

1804
01:13:13,177 --> 01:13:17,412
but if we let go, settles down, now it'll do, 'kay?

1805
01:13:17,414 --> 01:13:19,881
All right, so that's it for that demo.

1806
01:13:19,883 --> 01:13:22,650
I should got to show you a lot of different behaviours there.

1807
01:13:22,652 --> 01:13:24,284
I didn't show you push behaviour,

1808
01:13:24,286 --> 01:13:26,920
which you're gonna need for your assignment.

1809
01:13:26,922 --> 01:13:28,988
I didn't show you snap behaviour which is very

1810
01:13:28,990 --> 01:13:31,391
commonly used in the UI, but you don't need it for

1811
01:13:31,393 --> 01:13:34,060
your assignment, so I didn't show that one, but

1812
01:13:34,062 --> 01:13:36,195
I showed you the collider and the gravity.

1813
01:13:36,197 --> 01:13:39,064
The gravity is an optional one in your assignment, you might

1814
01:13:39,066 --> 01:13:41,066
wanna use gravity, it could be fun, totally up to you.

1815
01:13:41,068 --> 01:13:43,534
[SOUND] But that's it.

1816
01:13:43,536 --> 01:13:45,169
So, good luck with assignment five, and

1817
01:13:45,171 --> 01:13:47,271
if you have any questions, I'll be here as usual.

1818
01:13:48,374 --> 01:13:48,405
>> For more, please visit us at Stanford.edu.
